<?xml version="1.0" encoding="UTF-8"?><rss version="2.0">
    <channel>
        <title>zenProg - les commentaires</title>
        <description>Programmez simplement</description>
        <lastBuildDate>Thu, 13 Jan 2011 17:39:52 +0100</lastBuildDate>
        <link>http://zenprog.com//</link>
                <item>
            <title>gege2061</title>
            <description><![CDATA[
            <p>Je comprends mieux... Il y a même un bug à ce sujet : <a href="http://bugs.php.net/bug.php?id=48742">#48742</a>.
            ]]></description>
            <pubDate>Thu, 13 Jan 2011 17:39:52 +0100</pubDate>
            <link>http://zenprog.com//index.php?cle=Un-cas-d'utilisation-possible-des-closures#16</link>
        </item>
                <item>
            <title>Eric</title>
            <description><![CDATA[
            <p>Oui, tous le monde confond, même la <a href='http://www.php.net/manual/fr/functions.anonymous.php'>documentation PHP</a> ;-)

<br/>Mon billet est donc bien sur les closures et pas que sur les fonctions anonymes.
            ]]></description>
            <pubDate>Thu, 13 Jan 2011 16:44:58 +0100</pubDate>
            <link>http://zenprog.com//index.php?cle=Un-cas-d'utilisation-possible-des-closures#15</link>
        </item>
                <item>
            <title>gege2061</title>
            <description><![CDATA[
            <p>Justement je m'amusai avec le concept ce matin !


<p><blockquote>Un ajout important est celui des fonctions anonymes (ou fermeture, ou closure en Anglais),</blockquote>
Ah non, Monsieur ! Une fonction anonyme (ou lambda) est le fait qu'une fonction puisse ne pas poster de nom (déjà présent depuis PHP 4.0.1 avec create_function) alors que les fermetures (closures en anglais) est le fait porter une variable locales dans le corps qu'une fonction imbriquée (qui peux ne pas être anonyme).


<p>Juste un coup de gueule parce que depuis que j'étudie le sujet en PHP, tous le monde confonds...


<p>Sinon je trouve très pratique couplé au signaux : <a href="http://gitorious.org/nano-mvc/test/blobs/master/test/signal.php">test/signal.php</a>


<p><blockquote>Vivement le jour ou PHP permettra de typer le retour des fonctions .... </blockquote>
Vivement le jour où PHP aura un typage explicite...
            ]]></description>
            <pubDate>Thu, 13 Jan 2011 15:27:46 +0100</pubDate>
            <link>http://zenprog.com//index.php?cle=Un-cas-d'utilisation-possible-des-closures#14</link>
        </item>
                <item>
            <title>Eric</title>
            <description><![CDATA[
            <p>Voici le code disponible sur le web :
<a href='http://source.zenprog.com/zenblog/lib/SQLQuery.class.php'>SQLQuery.class.php</a>


<p>En fait, je me sert uniquement des requêtes préparés avec PDO. Je n'ai donc pas besoin de mapper les fonctions de PDO.
            ]]></description>
            <pubDate>Wed, 12 Jan 2011 10:44:19 +0100</pubDate>
            <link>http://zenprog.com//index.php?cle=Critique-du-design-pattern-singleton#13</link>
        </item>
                <item>
            <title>Savageman</title>
            <description><![CDATA[
            <p>Oui, mais ça reviens plus ou moins au même. J'irai voir plus en détails le code, car quelque chose me gêne a priori : avec ta technique, on est obligé de ré-encapsuler toutes les méthodes de PDO dont on a besoin pour s'en servir...

<br/>En plus, la signature de ta classe diffère de PDO (query() est mappé sur prepare()), et on perd l'utilité du natif qui propose déjà une interface (très complète même) pour les accès BDD.
            ]]></description>
            <pubDate>Wed, 12 Jan 2011 08:52:36 +0100</pubDate>
            <link>http://zenprog.com//index.php?cle=Critique-du-design-pattern-singleton#12</link>
        </item>
                <item>
            <title>Eric</title>
            <description><![CDATA[
            <p>@Savageman

<br/>La réponse se trouve dans le code de zenBlog ;-)

<br/>Voici l'extrait de la classe SQLQuery qui se connecte lors de la première requête.




















	<div class='code'><pre><span style='display:inline; white-space:normal'><span class='t_keyword'>class</span> <span class='t_string'>SQLQuery</span> {</span>
<span style='display:inline; white-space:normal'></span>
<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'><span class='t_keyword'>private</span> <span class='t_keyword'>function</span> <span class='t_string'>getPdo</span>(){</span>
<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'><span class='t_keyword'>static</span> <span class='t_variable'>$pdo</span>;</span>
<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'></span>
<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'><span class='t_keyword'>if</span> ( ! <span class='t_variable'>$pdo</span>){</span>
<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'><span class='t_variable'>$pdo</span> = <span class='t_keyword'>new</span> <span class='t_string'>PDO</span>(<span class='t_variable'>$dsn</span>,<span class='t_variable'>$this</span><span class='t_object_operator'>-&gt;</span><span class='t_string'>login</span>,<span class='t_variable'>$this</span><span class='t_object_operator'>-&gt;</span><span class='t_string'>password</span>);</span>
<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'>}</span>
<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'><span class='t_keyword'>return</span> <span class='t_variable'>$pdo</span>;</span>
<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'>}</span>
<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'></span>
<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'></span>
<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'><span class='t_keyword'>public</span> <span class='t_keyword'>function</span> <span class='t_string'>query</span>(<span class='t_variable'>$query</span>,<span class='t_variable'>$param</span> = <span class='t_string'>false</span>){</span>
<span style='display:inline; white-space:normal'>    </span>&#9;<span style='display:inline; white-space:normal'>    </span>&#9;<span style='display:inline; white-space:normal'><span class='t_variable'>$pdoStatement</span> = <span class='t_variable'>$this</span><span class='t_object_operator'>-&gt;</span><span class='t_string'>getPdo</span>()<span class='t_object_operator'>-&gt;</span><span class='t_string'>prepare</span>(<span class='t_variable'>$query</span>);</span>
<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'>}</span>
<span style='display:inline; white-space:normal'></span>&#9;<span style='display:inline; white-space:normal'></span>
<span style='display:inline; white-space:normal'>}</span>
<span style='display:inline; white-space:normal'></span>
<span style='display:inline; white-space:normal'></pre>
	</div>
	
            ]]></description>
            <pubDate>Wed, 12 Jan 2011 07:28:58 +0100</pubDate>
            <link>http://zenprog.com//index.php?cle=Critique-du-design-pattern-singleton#11</link>
        </item>
                <item>
            <title>Savageman</title>
            <description><![CDATA[
            <p><br/>Je reviens sur le billet de décembre parlant du Singleton.

<br/>Dans le cas de la gestion d'une BDD, il m'est utile pour ne pas m'y connecter lorsque la page n'a besoin d'aucune requête SQL. Si quelqu'un a une autre solution pour répondre à ce problème sans Singleton, je serai ravi d'y répondre, en attendant... J'en utiliserais toujours pour ma BDD. Comment faire ici ?

<br/>Je ne suis pas encore tombé sur d'autres cas où c'était utile dans mes dev pour le moment.
            ]]></description>
            <pubDate>Tue, 11 Jan 2011 18:42:21 +0100</pubDate>
            <link>http://zenprog.com//index.php?cle=Critique-du-design-pattern-singleton#10</link>
        </item>
                <item>
            <title>gege2061</title>
            <description><![CDATA[
            <p>De ce que j'ai pu lire, l'usurpation d'identité n'est pas si simple si les MDA ne se contentaient pas de faire confiance au champ from.


<p>Idem pour les problèmes de citation de Outlook, il faut faire comme pour Internet Explorer avec le web : l'oublier, si les fonctionnalités deviennent populaire il s'adaptera ou mourra.


<p>PS : Une feuille de style familière mais efficace, mais c'est aussi la liste « étiquette » que j'aime beaucoup (impossible de trouver un webmail qui les supporte, c'est pourtant une RFC...).
            ]]></description>
            <pubDate>Tue, 11 Jan 2011 15:56:42 +0100</pubDate>
            <link>http://zenprog.com//index.php?cle=Critique-de-l-email#9</link>
        </item>
                <item>
            <title>Eric</title>
            <description><![CDATA[
            <p>J'ai commencé à réfléchir à un système qui permettrait de transformer les conversations issues des mails en mur, mais je pense qu'il y a des problèmes qui ne sont pas solvables : notamment le fait que Outlook (pas exemple) ne marque pas correctement le message cité (avec un > ou un blockquote) : même Gmail ne le traite pas correctement (il n'est pas replié).


<p>Et puis, on peut facilement usurper une adresse mail, c'est plus délicat avec un compte Facebook.


<p>Donc, c'est bien à tous le système de mail que ma critique s'intéressait.


<p>PS : non, zenMail n'est pas une maquette. C'est un MDA/webmail qui gère les conversations avec une feuille de style familière ;-) Ce n'est pas opérationnel à 100%, mais ce me permet de traiter 99% de mes mails ...


<p>PPS: je ne sais pas à quoi j'ai pensé en faisant un fil de discussion global, il est bien évident que les commentaires devraient aller sous leur billets respectifs... seul le flux RSS des commentaires devraient être global ...
            ]]></description>
            <pubDate>Tue, 11 Jan 2011 14:42:48 +0100</pubDate>
            <link>http://zenprog.com//index.php?cle=Critique-de-l-email#8</link>
        </item>
                <item>
            <title>gege2061</title>
            <description><![CDATA[
            <p>Concernant ta critique de l'e-mail : http://zenprog.com/index.php?cle=Critique-de-l-email


<p>Je suis d'accord, les clients mails sont de plus en plus à la trainent par rapport à ce que l'on pourrait attendre en comparaison de facebook.


<p>Mais je pense qu'il y a méprise, ce sont bien les clients mails et non le mails sont sont à jeter ! Gmail est peut être celui qui est le moins à la traine (conversation, étiquette) et à lire ton billet je me dit que google wave était un précurseur incompris (comme souvent).


<p>Je pense qu'un facebook like uniquement à base de mails est possible, il faut juste un bon client, yapluka...


<p>PS : rassure moi, zenmail ce n'est qu'une maquette ?
            ]]></description>
            <pubDate>Tue, 11 Jan 2011 11:59:31 +0100</pubDate>
            <link>http://zenprog.com//index.php?cle=Critique-de-l-email#7</link>
        </item>
            </channel>
</rss>
