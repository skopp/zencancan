<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">
	<id>tag:weirdog.com,2010-02-18:feed</id>
	<title>Weirdog - Articles</title>
	
	<link href="http://www.weirdog.com/" />

	<author>
		<name>Laviale Olivier</name>
	</author>

	<updated>2011-01-16T14:58:24+01:00</updated>

	<atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/wdblog" /><feedburner:info uri="wdblog" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry>
		<title>Récupérer des données depuis une base de données en utilisant l'API ActiveRecord du framework WdCore</title>
		<link href="http://feedproxy.google.com/~r/wdblog/~3/clZ6etQX_Dg/api-activerecord.html" />
		<id>tag:weirdog.com,2010-11-30:api-activerecord</id>
		<updated>2011-01-16T14:58:24+01:00</updated>
		<published>2011-01-16T20:52:00+01:00</published>
		<author>
			<name>Laviale Olivier</name>
		</author>
		<category term="WdCore" />
		<content type="html" xml:lang="fr">&lt;p&gt;Adoptant &lt;a href="http://edgeguides.rubyonrails.org/active_record_querying.html" target="_blank"&gt;ce que propose le framework Rails&lt;/a&gt; pour le langage de programmation &lt;a href="http://www.ruby-lang.org/fr/" target="_blank"&gt;Ruby&lt;/a&gt;, le framework &lt;a href="http://weirdog.com/wdcore/" target="_blank"&gt;WdCore&lt;/a&gt; offre une &lt;span class="caps"&gt;API&lt;/span&gt; permettant de manipuler les enregistrements en base de données comme de simples objets. On peut ainsi créer des tables, ajouter des enregistrements, les modifier, les supprimer sans jamais avoir à saisir la moindre commande &lt;span class="caps"&gt;SQL&lt;/span&gt;. Cet article a pour but de présenter les méthodes permettant de récupérer un objet, ou une collection d'objets, depuis une base de données, mais aussi de spécifier l'ordre dans lequel les objets sont récupérés, comment les grouper, ou encore comment ne récupérer que certains champs.&lt;/p&gt;

&lt;p&gt;Les requêtes se font sur un objet &lt;em&gt;modèle&lt;/em&gt; qui est une représentation d'une ou plusieurs tables en base de données. Au long de cette démonstration, la variable &lt;code&gt;$model&lt;/code&gt; fera référence au modèle de données primaire du module « Noeuds », que l'on peut obtenir avec la ligne suivante :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="variable"&gt;$core&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;models[&lt;/span&gt;&lt;span class="string"&gt;'system.nodes'&lt;/span&gt;&lt;span class="symbol"&gt;]&lt;/span&gt;;&lt;/code&gt;

&lt;blockquote&gt;
  &lt;p&gt;Avant de continuer la lecture de cet article, vous devez être familiarisé avec les &lt;a href="http://www.php.net/manual/fr/language.oop5.php" target="_blank"&gt;concepts objet de &lt;span class="caps"&gt;PHP&lt;/span&gt;&lt;/a&gt; ainsi que &lt;a href="http://www.php.net/manual/fr/intro.pdo.php" target="_blank"&gt;&lt;span class="caps"&gt;PDO&lt;/span&gt;&lt;/a&gt;, son interface d'accès aux bases de données. Vous pouvez retrouver le &lt;a href="https://github.com/Weirdog/WdCore/blob/master/wdactiverecordquery.php" target="_blank"&gt;code source de la classe &lt;code&gt;WdActiveRecordQuery&lt;/code&gt; sur Github&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Récupérer des objets depuis la base de données&lt;/h2&gt;

&lt;p&gt;L'API ActiveRecord propose plusieurs méthodes permettant de récupérer des objets depuis la base de données. Chacune de ces méthodes permet de définir les fragments de la requête &lt;span class="caps"&gt;SQL&lt;/span&gt; qui sera soumise à la base de données, sans que l'on aie jamais à saisir d'expression &lt;span class="caps"&gt;SQL&lt;/span&gt; brute. Les méthodes reprennent le vocabulaire de &lt;span class="caps"&gt;SQL&lt;/span&gt;, en voici quelques une :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;where&lt;/li&gt;
&lt;li&gt;select&lt;/li&gt;
&lt;li&gt;group&lt;/li&gt;
&lt;li&gt;order&lt;/li&gt;
&lt;li&gt;limit&lt;/li&gt;
&lt;li&gt;offset&lt;/li&gt;
&lt;li&gt;joins&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chacune de ces méthodes retourne une instance de la classe &lt;a href="https://github.com/Weirdog/WdCore/blob/master/wdactiverecordquery.php" target="_blank"&gt;&lt;code&gt;WdActiveRecordQuery&lt;/code&gt;&lt;/a&gt;, permettant d'enchainer les méthodes les unes à la suite des autres.&lt;/p&gt;

&lt;p&gt;Nous verrons qu'il existe de nombreuses façons de récupérer des données, notamment au travers des propriétés &lt;code&gt;all&lt;/code&gt; et &lt;code&gt;one&lt;/code&gt;, mais pour le moment intéressons-nous à la plus simples d'entre elles : la méthodes &lt;code&gt;find&lt;/code&gt; qui permet de récupérer un objet ou un jeu d'objets.&lt;/p&gt;

&lt;h3&gt;Récupérer un objet unique&lt;/h3&gt;

&lt;p&gt;L'API ActiveRecord permet de récupérer un objet unique très simplement. En utilisant « &lt;code&gt;$model-&amp;gt;find(primary_key)&lt;/code&gt; » ou « &lt;code&gt;$model[primary_key]&lt;/code&gt; », on peut récupérer l'objet correspondant à une clé primaire :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$article&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;find&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;10&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;On peut également accéder aux modèles de données comme s'il s'agissait de tableaux associatifs, c'est d'ailleurs cette forme que l'on privilégiera lorsque l'on récupère un enregistrement unique :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$article&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="variable"&gt;$model[10]&lt;/span&gt;;&lt;/code&gt;

&lt;h3&gt;Récupérer un ensemble d'objets&lt;/h3&gt;

&lt;p&gt;En utilisant la même méthode, il est également possible de récupérer un ensemble d'objets :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$articles&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;find&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;10&lt;/span&gt;, &lt;span class="number"&gt;32&lt;/span&gt;, &lt;span class="number"&gt;89&lt;/span&gt;&lt;span class="symbol"&gt;))&lt;/span&gt;;&lt;br /&gt;
&lt;code class="comment"&gt;# ou&lt;/code&gt;&lt;br /&gt;
&lt;span class="variable"&gt;$articles&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;find&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;10&lt;/span&gt;, &lt;span class="number"&gt;32&lt;/span&gt;, &lt;span class="number"&gt;89&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Récupérer des enregistrements en utilisant la méthode &lt;code&gt;find&lt;/code&gt; met en jeu deux fonctionnalités supplémentaires : les exceptions et la mise en cache des enregistrements.&lt;/p&gt;

&lt;h3&gt;Exceptions et mise en cache&lt;/h3&gt;

&lt;p&gt;Que l'on récupère un objet unique ou un jeu d'objets, une exception de type &lt;code&gt;WdMissingRecordException&lt;/code&gt; est lancée lorsque qu'un objet s'avère manquant dans la base de données.&lt;/p&gt;

&lt;p&gt;Une fois récupérés sans encombre, les objets sont mis en cache, c'est à dire que si l'on demande une seconde fois un objet, il sera servi depuis le cache, évitant ainsi une requête à la base de données.&lt;/p&gt;

&lt;h2&gt;Conditions&lt;/h2&gt;

&lt;p&gt;Afin de restreindre le nombre d'enregistrements retournés, il est possible de préciser des conditions de recherche. Les conditions peuvent être précisées sous forme de chaines de caractères ou de tableaux associatifs.&lt;/p&gt;

&lt;h3&gt;Chaine de caractères de conditions&lt;/h3&gt;

&lt;p&gt;Si l'on souhaite ajouter une condition à notre recherche, on peut la préciser aussi simplement que « &lt;code&gt;$model-&amp;gt;where('is_online = 1');&lt;/code&gt; ». Cela retournera tous les enregistrements dont le champ &lt;code&gt;is_online&lt;/code&gt; a pour valeur « 1 ».&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Attention, construire votre propre condition sous la forme d'une chaine de caractères vous rend particulièrement vulnérable aux &lt;a href="http://fr.wikipedia.org/wiki/Injection_SQL" target="_blank"&gt;attaques d'injection &lt;span class="caps"&gt;SQL&lt;/span&gt;&lt;/a&gt;, parce qu'on ne sait jamais ce que les petits malins sont capables de faire pour exploiter nos données. La section suivante vous renseignera sur la meilleure façon de passer des arguments à vos conditions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Tableau associatif de conditions&lt;/h3&gt;

&lt;p&gt;Si la valeur « 1 » est variable, parce qu'elle provient d'un paramètre qui peut être extérieur à l'application, on utilisera la forme de condition suivante :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online = ?'&lt;/span&gt;, &lt;span class="variable"&gt;$_GET[&lt;/span&gt;&lt;span class="string"&gt;'online'&lt;/span&gt;&lt;span class="symbol"&gt;])&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;ou encore :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online'&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="variable"&gt;$_GET[&lt;/span&gt;&lt;span class="string"&gt;'online'&lt;/span&gt;&lt;span class="symbol"&gt;]))&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Avec deux conditions à préciser, cela donne :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online = ? AND is_home_excluded = ?'&lt;/span&gt;, &lt;span class="variable"&gt;$_GET[&lt;/span&gt;&lt;span class="string"&gt;'online'&lt;/span&gt;&lt;span class="symbol"&gt;]&lt;/span&gt;, &lt;span class="reserved"&gt;false&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;ou bien :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online'&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="variable"&gt;$_GET[&lt;/span&gt;&lt;span class="string"&gt;'online'&lt;/span&gt;&lt;span class="symbol"&gt;]&lt;/span&gt;, &lt;span class="string"&gt;'is_home_excluded'&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="reserved"&gt;false&lt;/span&gt;&lt;span class="symbol"&gt;))&lt;/span&gt;;&lt;/code&gt;

&lt;h3&gt;Conditions de sous-ensembles&lt;/h3&gt;

&lt;p&gt;Si l'on souhaite rechercher les enregistrements qui appartiennent à un sous-ensemble, on peut fournir un tableau associatif en tant que valeur de la condition :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'orders_count'&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;,&lt;span class="number"&gt;3&lt;/span&gt;,&lt;span class="number"&gt;5&lt;/span&gt;&lt;span class="symbol"&gt;)))&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Ce code générera quelque chose comme : &lt;code&gt;... WHERE (orders_count IN (1,3,5))&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Modificateurs&lt;/h3&gt;

&lt;p&gt;Lorsque les conditions sont précisées sous la forme d'un tableau associatif, il est possible de modifier la fonction de comparaison en préfixant le champ par un signe d'exclamation « ! ». Ainsi, au lieu de rechercher la commande ayant « &lt;code&gt;2&lt;/code&gt; » pour identifiant, on pourra rechercher les commandes n'ayant &lt;em&gt;pas&lt;/em&gt; « &lt;code&gt;2&lt;/code&gt; » pour identifiant :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'!order_count'&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="symbol"&gt;))&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;De la même manière on pourra rechercher les enregistrements qui n'appartiennent &lt;em&gt;pas&lt;/em&gt; à un sous-ensemble :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'!order_count'&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;,&lt;span class="number"&gt;3&lt;/span&gt;,&lt;span class="number"&gt;5&lt;/span&gt;&lt;span class="symbol"&gt;)))&lt;/span&gt;;&lt;/code&gt;

&lt;h3&gt;Filtres dynamiques&lt;/h3&gt;

&lt;p&gt;Pour chaque colonne définie par le modèle, l'API ActiveRecord fournie automatiquement une méthode de recherche.
Parce le modèle &lt;em&gt;Nœuds&lt;/em&gt; définit le champ &lt;code&gt;slug&lt;/code&gt;, on peut utiliser la méthode de recherche
&lt;code&gt;find_by_slug&lt;/code&gt; :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;find_by_slug&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'creer-nuage-mots-cle'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Si l'on a besoin de connaitre les articles en ligne de l'utilisateur ayant pour identifiant &lt;code&gt;3&lt;/code&gt; on
peut tout simplement enchainer les filtres avec le séparateur &lt;code&gt;_and_&lt;/code&gt; :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;find_by_is_online_and_uid&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="reserved"&gt;true&lt;/span&gt;, &lt;span class="number"&gt;3&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Ce qui, si l'on utilise la méthode de recherche &lt;code&gt;where&lt;/code&gt;, équivaut à :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online'&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="reserved"&gt;true&lt;/span&gt;, &lt;span class="string"&gt;'uid'&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;3&lt;/span&gt;&lt;span class="symbol"&gt;))&lt;/span&gt;;&lt;/code&gt;

&lt;h3&gt;Portées&lt;/h3&gt;

&lt;p&gt;Les portées peuvent être considérées comme des &lt;em&gt;macros&lt;/em&gt; de recherche, des options toutes prêtes,
rapides à utiliser. Chaque modèle peut définir ses propres portées ou surcharger
celles du modèle dont il hérite. Par exemple, voici la définition de la portée &lt;em&gt;visible&lt;/em&gt; par le
modèle &lt;em&gt;Nœuds&lt;/em&gt; :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
...&lt;br /&gt;
&lt;br /&gt;
    protected &lt;span class="reserved"&gt;function&lt;/span&gt; &lt;span class="function"&gt;scope_visible&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;WdActiveRecordQuery &lt;span class="variable"&gt;$query&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
    &lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
        global &lt;span class="variable"&gt;$core&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
        &lt;span class="reserved"&gt;return&lt;/span&gt; &lt;span class="variable"&gt;$query&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online = 1 AND (siteid = 0 OR siteid = ?) AND (language = &amp;quot;&amp;quot; OR language = ?)'&lt;/span&gt;, &lt;span class="variable"&gt;$core&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;site&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;siteid&lt;/span&gt;, &lt;span class="variable"&gt;$core&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;site&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;language&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
    &lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
    ...&lt;/code&gt;

&lt;p&gt;On peut alors très simplement obtenir la liste des enregistrements disponibles pour le site :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;visible&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;On peut bien sûr combiner les portées ainsi que les autres méthodes de recherche :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;find_by_uid&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;visible&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'YEAR(created) = 2011'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;h2&gt;Ordonner les enregistrements&lt;/h2&gt;

&lt;p&gt;Pour récupérer les enregistrements dans un certain ordre, on peut utiliser la méthode « &lt;code&gt;order&lt;/code&gt; ».&lt;/p&gt;

&lt;p&gt;Par exemple, si l'on souhaite récupérer les enregistrements dans l'ordre chronologique de leur date de création (enregistrée dans le champ « &lt;code&gt;created&lt;/code&gt; ») :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;order&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;code class="comment"&gt;# ou&lt;/code&gt;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;order&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created ASC'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Pour un ordre antichronologique :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;order&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created DESC'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;On peut également ordonner les enregistrements selon plusieurs critères :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;order&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created DESC, title'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;h2&gt;Grouper les données&lt;/h2&gt;

&lt;p&gt;La clause &lt;span class="caps"&gt;SQL&lt;/span&gt; &lt;code&gt;GROUP BY&lt;/code&gt; peut être spécifiée en utilisant la méthode &lt;code&gt;group()&lt;/code&gt;. Par exemple, si
l'on souhaite obtenir le premier enregistrement crée par jour, on utilisera le code suivant :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;group&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'date(created)'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;order&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;h3&gt;Appliquer un filtre au groupe&lt;/h3&gt;

&lt;p&gt;La clause &lt;code&gt;HAVING&lt;/code&gt; est utilisée pour spécifier les conditions de la clause &lt;code&gt;GROUP BY&lt;/code&gt;. Par exemple,
si l'on souhaite obtenir le premier enregistrement crée par jour pour le mois passé, on utilisera
le code suivant :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;group&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'date(created)'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;having&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created &amp;gt; ?'&lt;/span&gt;, &lt;span class="function"&gt;date&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'Y-m-d'&lt;/span&gt;, &lt;span class="function"&gt;strtotime&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'-1 month'&lt;/span&gt;&lt;span class="symbol"&gt;)))-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;order&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;/code&gt;

&lt;h2&gt;Limite et décalage&lt;/h2&gt;

&lt;p&gt;La méthode « &lt;code&gt;limit&lt;/code&gt; » peut être utilisée pour limiter le nombre d'enregistrements retournés. Elle accepte un ou deux arguments numériques. Ces arguments doivent être des entiers constants.&lt;/p&gt;

&lt;p&gt;Avec un argument, la valeur spécifie le nombre de lignes à retourner depuis le début du jeu de résultat. Si deux arguments sont donnés, le premier indique le décalage du premier enregistrement à retourner, le second donne le nombre maximum d'enregistrements à retourner. Le décalage du premier enregistrement est 0 (pas 1) :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online = 1'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;limit&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;10&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;; &lt;code class="comment"&gt;// retourne les 10 premiers enregistrements&lt;/code&gt;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online = 1'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;limit&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;5&lt;/span&gt;, &lt;span class="number"&gt;10&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;; &lt;code class="comment"&gt;// retourne les enregistrements 6 à 16&lt;/code&gt;&lt;/code&gt;

&lt;p&gt;La méthode « &lt;code&gt;offset&lt;/code&gt; » peut être utilisée pour définir seulement le décalage :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online = 1'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;offset&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;5&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;; &lt;code class="comment"&gt;// retourne les enregistrements de 6 jusqu'au dernier&lt;/code&gt;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online = 1'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;limit&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;10&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;offset&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;5&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;h2&gt;Sélectionner des champs spécifiques&lt;/h2&gt;

&lt;p&gt;Par défaut, tous les champs sont sélectionnés (&lt;code&gt;SELECT *&lt;/code&gt;) et les enregistrements sont retournés
sous la forme d'objets dont la classe dépend du modèle de données. Il est cependant possible de ne
sélectionner qu'un sous ensemble de champs grâce à la méthode &lt;code&gt;select&lt;/code&gt;. Dans ce cas, chaque ligne
de résultat est renvoyée sous la forme d'un tableau associatif. Par exemple si l'on souhaite
obtenir l'identifiant d'un nœud, sa date de création et son titre :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;select&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'nid, created, title'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Parce que les champs spécifiés sont utilisés tels-quels pour construire la requête &lt;span class="caps"&gt;SQL&lt;/span&gt;, il est
tout à fait possible d'utiliser les fonctions &lt;span class="caps"&gt;SQL&lt;/span&gt; :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;select&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'nid, created, CONCAT_WS(&amp;quot;:&amp;quot;, title, language)'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;h2&gt;Joindre des tables&lt;/h2&gt;

&lt;p&gt;L'API Active Record fournie une méthode de recherche qui permet de spécifier la clause &lt;code&gt;JOIN&lt;/code&gt; de la
requête &lt;span class="caps"&gt;SQL&lt;/span&gt;. Grâce à la méthode &lt;code&gt;joins&lt;/code&gt;, il est possible de spécifier un fragment brut ou d'utiliser les
relations qu'il existe entre les modèles.&lt;/p&gt;

&lt;h3&gt;Utiliser un fragment brut&lt;/h3&gt;

&lt;p&gt;On peut spécifier un fragment brut, il sera inclus tel quel dans la requête finale :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;joins&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'INNER JOIN contents USING(nid)'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;h3&gt;Utiliser une référence à un modèle&lt;/h3&gt;

&lt;p&gt;On peut profiter des relations définies entre les modèles et laisser faire le framework :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;joins&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;':contents'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;La requête produira le même effet que la précédente, sans que nous ayons à nous soucier des
conditions de la jointure. On notera les deux points « : » utilisés pour identifier l'utilisation
d'un nom de modèle plutôt qu'un fragment brut.&lt;/p&gt;

&lt;h2&gt;Récupérer les données&lt;/h2&gt;

&lt;p&gt;Il existe de nombreuses façons de récupérer les lignes du jeu d'enregistrement. Nous avons déjà vu la méthode &lt;code&gt;find&lt;/code&gt;, voici les méthodes et les propriétés que l'on peut utiliser conjointement aux méthodes de recherche :&lt;/p&gt;

&lt;h3&gt;Par itération&lt;/h3&gt;

&lt;p&gt;Parce que l'objet &lt;code&gt;WdActiveRecordQuery&lt;/code&gt; est traversable, l'itération est la façon la plus simple
de récupérer les lignes du jeu d'enregistrements :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="reserved"&gt;foreach&lt;/span&gt; &lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online = 1'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt; &lt;span class="reserved"&gt;as&lt;/span&gt; &lt;span class="variable"&gt;$node&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
&lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
    ...&lt;br /&gt;
&lt;span class="symbol"&gt;}&lt;/span&gt;&lt;/code&gt;

&lt;h3&gt;Récupérer tous les enregistrements&lt;/h3&gt;

&lt;p&gt;Le jeu de résultat peut être renvoyé sous la forme d'un tableau associatif grâce à la propriété
&lt;code&gt;all&lt;/code&gt; :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$array&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;order&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created DESC'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;all&lt;/span&gt;;&lt;/code&gt;

&lt;h3&gt;Récupérer seulement le premier enregistrement&lt;/h3&gt;

&lt;p&gt;Il arrive souvent que l'on ne souhaite récupérer que le premier objet d'une requête, dans ce cas
on utilisera la propriété &lt;code&gt;one&lt;/code&gt; :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$record&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;order&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created DESC'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;one&lt;/span&gt;;&lt;/code&gt;

&lt;h3&gt;Récupérer des paires de valeurs&lt;/h3&gt;

&lt;p&gt;Lorsque l'on ne sélectionne que deux colonnes, il est possible de récupérer un résultat sous la
forme clé/valeur grâce à la propriété &lt;code&gt;pairs&lt;/code&gt; :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;select&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'nid, title'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;pairs&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Dans ce cas la première colonne est utilisée comme clé et la seconde comme valeur, pour un
résultat similaire à celui-ci :&lt;/p&gt;

&lt;code class="html"&gt;array&lt;br /&gt;
  34 =&amp;gt; string 'Créer un nuage de mots-clé' (length=28)&lt;br /&gt;
  57 =&amp;gt; string 'Générer à la volée des miniatures avec mise en cache' (length=56)&lt;br /&gt;
  307 =&amp;gt; string 'Mes premiers pas de développeur sous Ubuntu 10.04 (Lucid Lynx)' (length=63)&lt;br /&gt;
  ...&lt;/code&gt;

&lt;h2&gt;Choisir le type des enregistrements&lt;/h2&gt;

&lt;p&gt;En général on laissera le framework décider du type des enregistrements, mais il est possible de décider cela à
sa place grâce à la méthode &lt;code&gt;mode&lt;/code&gt; :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;select&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'nid, title'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;mode&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;PDO::FETCH_NUM&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;La méthode &lt;code&gt;mode&lt;/code&gt; prend les même arguments que la méthode
&lt;a href="http://php.net/manual/fr/pdostatement.setfetchmode.php" target="_blank"&gt;&lt;span class="caps"&gt;PDOS&lt;/span&gt;tatement::setFetchMode&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Choisir le type des enregistrements avec les méthodes &lt;code&gt;all&lt;/code&gt; et &lt;code&gt;one&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Il est également possible de définir le type des données depuis les méthodes &lt;code&gt;all&lt;/code&gt; et &lt;code&gt;one&lt;/code&gt; :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$array&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;order&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created DESC'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;all&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;PDO::FETCH_ASSOC&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$record&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;order&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created DESC'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;one&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;PDO::FETCH_ASSOC&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;h2&gt;Tester l'existence d'objets&lt;/h2&gt;

&lt;p&gt;Pour simplement vérifier l'existence d'objets on utilise la méthode &lt;code&gt;exists&lt;/code&gt;. Comme la méthode
&lt;code&gt;find&lt;/code&gt;, cette méthode interroge la base de données à la recherche d'objets, mais au lieu de
retourner un objet ou une collection d'objets elle retourne &lt;code&gt;TRUE&lt;/code&gt; ou &lt;code&gt;FALSE&lt;/code&gt; selon la présence de
l'objet, ou des objets, dans la base.&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;exists&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;La méthode &lt;code&gt;exists&lt;/code&gt; accepte également les jeux d'identifiants, mais au lieu de retourner &lt;code&gt;TRUE&lt;/code&gt; ou
&lt;code&gt;FALSE&lt;/code&gt;, elle retourne un tableau associatif où chaque clé est la valeur de la clé primaire de
l'objet, et la valeur de cette clé est &lt;code&gt;TRUE&lt;/code&gt; ou &lt;code&gt;FALSE&lt;/code&gt; selon que l'objet existe ou pas.&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;exists&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;,&lt;span class="number"&gt;2&lt;/span&gt;,&lt;span class="number"&gt;999&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
&lt;code class="comment"&gt;# ou&lt;/code&gt;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;exists&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;,&lt;span class="number"&gt;2&lt;/span&gt;,&lt;span class="number"&gt;999&lt;/span&gt;&lt;span class="symbol"&gt;))&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Ce qui peut donner le résultat suivant :&lt;/p&gt;

&lt;code class="html"&gt;array&lt;br /&gt;
  1 =&amp;gt; boolean true&lt;br /&gt;
  2 =&amp;gt; boolean true&lt;br /&gt;
  999 =&amp;gt; boolean false&lt;/code&gt;

&lt;p&gt;Il est également possible d'utiliser la méthode &lt;code&gt;exists&lt;/code&gt; sans argument sur un modèle ou une
requête :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'author = ?'&lt;/span&gt;, &lt;span class="string"&gt;'Madonna'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;exists&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;La requête ci-dessus retourne &lt;code&gt;TRUE&lt;/code&gt; si au moins un auteur a pour nom « Madonna », &lt;code&gt;FALSE&lt;/code&gt; dans le cas
contraire.&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;exists&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;La requête ci-dessus retourne &lt;code&gt;FALSE&lt;/code&gt; si la table est vide, et &lt;code&gt;TRUE&lt;/code&gt; dans le cas contraire.&lt;/p&gt;

&lt;h2&gt;Fonctions de calcul&lt;/h2&gt;

&lt;p&gt;Cette section utilise la méthode &lt;code&gt;count&lt;/code&gt; comme exemple, mais les options décrites s'appliquent à
toutes les sous-sections, même si la méthode &lt;code&gt;count&lt;/code&gt; possède quelques particularités.&lt;/p&gt;

&lt;p&gt;Les méthodes de calcul peuvent s'appliquer directement sur le modèle :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;count&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Où sur une recherche :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'firstname = ?'&lt;/span&gt;, &lt;span class="string"&gt;'Ryan'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;.count;&lt;/code&gt;

&lt;p&gt;Bien sûr, toutes les méthodes de recherche peuvent être utilisées :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;find_by_firstname&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'Ryan'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;joins&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;':content'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'YEAR(date) = 2011'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;count&lt;/span&gt;;&lt;/code&gt;

&lt;h3&gt;Compter&lt;/h3&gt;

&lt;p&gt;La méthode &lt;code&gt;count&lt;/code&gt; permet de connaitre le nombre d'enregistrements. Si l'on veut être plus
spécifique, on peut connaitre le nombre d'enregistrements selon la valeur d'un champ :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;count&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Renvera un tableau avec pour clé la valeur de la colonne, et pour valeur le nombre
d'enregistrements ayant la même valeur pour la colonne :&lt;/p&gt;

&lt;code class="html"&gt;array&lt;br /&gt;
  0 =&amp;gt; string '35' (length=2)&lt;br /&gt;
  1 =&amp;gt; string '145' (length=3)&lt;/code&gt;

&lt;p&gt;Ici, il y a 35 enregistrements en ligne et 145 hors ligne.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Attention, ceci est une particularité de la méthode de calcul &lt;code&gt;count&lt;/code&gt;. Aucune autre méthode de
  calcul ne fonctionne de cette manière.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Moyenne, Minimum, Maximum et somme&lt;/h3&gt;

&lt;p&gt;Les méthodes de calcul &lt;code&gt;average&lt;/code&gt;, &lt;code&gt;minimum&lt;/code&gt;, &lt;code&gt;maximum&lt;/code&gt; et &lt;code&gt;sum&lt;/code&gt; permettent respectivement,
pour une colonne, de calculer la moyenne de ses valeurs, la valeur minimum, la valeur maximum et
la somme de ses valeurs.&lt;/p&gt;

&lt;p&gt;Contrairement à la méthode de calcul &lt;code&gt;count&lt;/code&gt;, ces méthodes requièrent le nom de la colonne sur
laquelle appliquer le calcul :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;average&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'comments_count'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;minimum&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;maximum&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;sum&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'comments_count'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;h2&gt;Récapitulatif de l'ensemble des méthodes sous forme d'exemples&lt;/h2&gt;

&lt;p&gt;Obtenir des objets :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$record&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="variable"&gt;$model[10]&lt;/span&gt;;&lt;br /&gt;
&lt;code class="comment"&gt;# ou&lt;/code&gt;&lt;br /&gt;
&lt;span class="variable"&gt;$record&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;find&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;10&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$records&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;find&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;10&lt;/span&gt;, &lt;span class="number"&gt;15&lt;/span&gt;, &lt;span class="number"&gt;19&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;code class="comment"&gt;# ou&lt;/code&gt;&lt;br /&gt;
&lt;span class="variable"&gt;$records&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;find&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;10&lt;/span&gt;, &lt;span class="number"&gt;15&lt;/span&gt;, &lt;span class="number"&gt;19&lt;/span&gt;&lt;span class="symbol"&gt;))&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Conditions :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online = ?'&lt;/span&gt;, &lt;span class="reserved"&gt;true&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online'&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="reserved"&gt;true&lt;/span&gt;, &lt;span class="string"&gt;'is_home_excluded'&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="reserved"&gt;false&lt;/span&gt;&lt;span class="symbol"&gt;))&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'siteid = 0 OR siteid = ?'&lt;/span&gt;, &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'language = '&lt;/span&gt;&lt;span class="string"&gt;' OR language = ?'&lt;/span&gt;, &lt;span class="string"&gt;&amp;quot;fr&amp;quot;&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
&lt;code class="comment"&gt;# Sous-ensembles&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'order_count'&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;, &lt;span class="number"&gt;2&lt;/span&gt;, &lt;span class="number"&gt;3&lt;/span&gt;&lt;span class="symbol"&gt;))&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'!order_count'&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;, &lt;span class="number"&gt;2&lt;/span&gt;, &lt;span class="number"&gt;3&lt;/span&gt;&lt;span class="symbol"&gt;))&lt;/span&gt;; &lt;code class="comment"&gt;# contraire&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;code class="comment"&gt;# Filtres dynamiques&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;find_by_nid&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;find_by_siteid_and_language&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;, &lt;span class="string"&gt;'fr'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
&lt;code class="comment"&gt;# Portées&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;visible&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Grouper, ordonner :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;group&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'date(created)'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;order&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;group&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'date(created)'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;having&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created &amp;gt; ?'&lt;/span&gt;, &lt;span class="function"&gt;date&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'Y-m-d'&lt;/span&gt;, &lt;span class="function"&gt;strtotime&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'-1 month'&lt;/span&gt;&lt;span class="symbol"&gt;)))-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;order&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Limites et décalage :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online = 1'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;limit&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;10&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;; &lt;code class="comment"&gt;// retourne les 10 premiers enregistrements&lt;/code&gt;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online = 1'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;limit&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;5&lt;/span&gt;, &lt;span class="number"&gt;10&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;; &lt;code class="comment"&gt;// retourne les enregistrements 6 à 16&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online = 1'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;offset&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;5&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;; &lt;code class="comment"&gt;// retourne les enregistrements de 6 jusqu'au dernier&lt;/code&gt;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online = 1'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;offset&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;5&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;limit&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;10&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Sélection de champs :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;select&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'nid, created, title'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;select&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'nid, created, CONCAT_WS(&amp;quot;:&amp;quot;, title, language)'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Jointures :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;joins&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'INNER JOIN contents USING(nid)'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;joins&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;':contents'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Récupérer les données :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;all&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;order&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created DESC'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;all&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;PDO::FETCH_ASSOC&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;order&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created DESC'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;mode&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;PDO::FETCH_ASSOC&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;all&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;order&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'created DESC'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;one&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;select&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'nid, title'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;pairs&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Tester l'existence d'objets :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;exists&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;exists&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;, &lt;span class="number"&gt;2&lt;/span&gt;, &lt;span class="number"&gt;3&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;exists&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;, &lt;span class="number"&gt;2&lt;/span&gt;, &lt;span class="number"&gt;3&lt;/span&gt;&lt;span class="symbol"&gt;))&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'author = ?'&lt;/span&gt;, &lt;span class="string"&gt;'madonna'&lt;/span&gt;&lt;span class="symbol"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;exists&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Fonctions de calcul :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;count&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;count&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'is_online'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;average&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'score'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;minimum&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'age'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;maximum&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'age'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;span class="variable"&gt;$model&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;sum&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'comments_count'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;/code&gt;

&lt;p&gt;Bref, de quoi faire.&lt;/p&gt;
&lt;img src="http://feeds.feedburner.com/~r/wdblog/~4/clZ6etQX_Dg" height="1" width="1"/&gt;</content>
	<feedburner:origLink>http://www.weirdog.com/blog/wdcore/api-activerecord.html</feedburner:origLink></entry>
	<entry>
		<title>La délégation de méthodes</title>
		<link href="http://feedproxy.google.com/~r/wdblog/~3/Gke1GshTmGg/la-delegation-de-methodes.html" />
		<id>tag:weirdog.com,2010-12-09:la-delegation-de-methodes</id>
		<updated>2011-01-13T14:54:06+01:00</updated>
		<published>2010-12-12T19:38:12+01:00</published>
		<author>
			<name>Laviale Olivier</name>
		</author>
		<category term="PHP" />
		<content type="html" xml:lang="fr">&lt;p&gt;La délégation est un principe de programmation selon lequel un objet, au lieu d'accomplir une méthode qu'il définit, la délègue à un objet auxiliaire. On pourrait dire qu'il lui &lt;em&gt;refile le bébé&lt;/em&gt;, se contentant de passer les arguments et de retourner le résultat. La délégation est un des principes fondamentaux qui sous-tendent d'autres systèmes d'abstraction comme la &lt;a href="http://en.wikipedia.org/wiki/Object_composition" target="_blank"&gt;composition&lt;/a&gt; ou les &lt;a href="http://fr.wikipedia.org/wiki/Mixin" target="_blank"&gt;mixins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Afin d'illustrer ce principe de délégation, je vous propose de découvrir son implémentation dans la classe &lt;a href="https://github.com/Weirdog/WdCore/blob/master/wdmodel.php" target="_blank"&gt;&lt;code&gt;WdModel&lt;/code&gt;&lt;/a&gt;, la classes de base des modèles de données du framework &lt;a href="http://weirdog.com/wdcore/" target="_blank"&gt;WdCore&lt;/a&gt;. Nous verrons les étapes qui ont conduit à l'implémentation actuelle : depuis le passage d'arguments jusqu'à l'utilisation de la trace d'exécution.&lt;/p&gt;

&lt;h2&gt;La délégation à l'œuvre dans les modèles de données&lt;/h2&gt;

&lt;p&gt;Le principe de délégation est à l'œuvre pour les méthodes &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;where&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;exists&lt;/code&gt; et &lt;code&gt;all&lt;/code&gt; des modèles de données du framework &lt;a href="http://weirdog.com/wdcore/" target="_blank"&gt;WdCore&lt;/a&gt;. Chacune de ses méthodes crée un objet &lt;a href="https://github.com/Weirdog/WdCore/blob/master/wdactiverecordquery.php" target="_blank"&gt;&lt;code&gt;WdActiveRecordQuery&lt;/code&gt;&lt;/a&gt;, lui applique la méthode invoquée en lui passant les arguments, puis retourne l'objet pour que le développeur puisse affiner sa requête ou l'exécuter.&lt;/p&gt;

&lt;h3&gt;Passer les arguments&lt;/h3&gt;

&lt;p&gt;Dans leur première version, chaque méthode créait l'objet &lt;em&gt;délégué&lt;/em&gt; et lui passait ses arguments. Voici par exemple la première implémentation de la méthode &lt;code&gt;where&lt;/code&gt; :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="reserved"&gt;class&lt;/span&gt; WdModel extends WdDatab&lt;span class="reserved"&gt;as&lt;/span&gt;eTable&lt;br /&gt;
&lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
    ...&lt;br /&gt;
    &lt;span class="reserved"&gt;public&lt;/span&gt; &lt;span class="reserved"&gt;function&lt;/span&gt; &lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$conditions&lt;/span&gt;, &lt;span class="variable"&gt;$conditions_args&lt;/span&gt;&lt;span class="symbol"&gt;=&lt;/span&gt;null&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
    &lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
        &lt;span class="variable"&gt;$args&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="function"&gt;func_get_args&lt;/span&gt;&lt;span class="symbol"&gt;()&lt;/span&gt;;&lt;br /&gt;
        &lt;span class="variable"&gt;$arq&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="reserved"&gt;new&lt;/span&gt; &lt;span class="function"&gt;WdActiveRecordQuery&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$this&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
        &lt;span class="reserved"&gt;return&lt;/span&gt; &lt;span class="function"&gt;call_user_func_array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$arq&lt;/span&gt;, __FUNCTION__&lt;span class="symbol"&gt;)&lt;/span&gt;, &lt;span class="variable"&gt;$args&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
    &lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;span class="symbol"&gt;}&lt;/span&gt;&lt;/code&gt;

&lt;p&gt;Si l'on met de côté la déclaration des paramètres de la fonction, on s'aperçoit que le code de délégation est vraiment passe partout, et qu'il s'applique de la même façon pour chaque méthode, nous pouvons donc le mutualiser.&lt;/p&gt;

&lt;h3&gt;Mutualisation du code de délégation&lt;/h3&gt;

&lt;p&gt;La mutualisation du code de délégation est assez simple. La méthode &lt;code&gt;defer_to_actionrecord_query()&lt;/code&gt; crée l'objet « délégué » et invoque la méthode spécifiée avec les arguments passés depuis la méthode d'appel.&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="reserved"&gt;class&lt;/span&gt; WdModel extends WdDatab&lt;span class="reserved"&gt;as&lt;/span&gt;eTable&lt;br /&gt;
&lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
    ...&lt;br /&gt;
    &lt;span class="reserved"&gt;private&lt;/span&gt; &lt;span class="reserved"&gt;function&lt;/span&gt; &lt;span class="function"&gt;defer_to_actionrecord_query&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$function&lt;/span&gt;, &lt;span class="variable"&gt;$args&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
    &lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
        &lt;span class="variable"&gt;$arq&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="reserved"&gt;new&lt;/span&gt; &lt;span class="function"&gt;WdActiveRecordQuery&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$this&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
        &lt;span class="reserved"&gt;return&lt;/span&gt; &lt;span class="function"&gt;call_user_func_array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$arq&lt;/span&gt;, &lt;span class="variable"&gt;$function&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;, &lt;span class="variable"&gt;$args&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
    &lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
    &lt;span class="reserved"&gt;public&lt;/span&gt; &lt;span class="reserved"&gt;function&lt;/span&gt; &lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$conditions&lt;/span&gt;, &lt;span class="variable"&gt;$conditions_args&lt;/span&gt;&lt;span class="symbol"&gt;=&lt;/span&gt;null&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
    &lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
        &lt;span class="variable"&gt;$args&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="function"&gt;func_get_args&lt;/span&gt;&lt;span class="symbol"&gt;()&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
        &lt;span class="reserved"&gt;return&lt;/span&gt; &lt;span class="variable"&gt;$this&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;defer_to_actionrecord_query&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;__FUNCTION__, &lt;span class="variable"&gt;$args&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
    &lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;span class="symbol"&gt;}&lt;/span&gt;&lt;/code&gt;

&lt;p&gt;On peut encore simplifier le code en utilisant la &lt;em&gt;trace d'exécution&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;Utiliser la trace d'exécution&lt;/h3&gt;

&lt;p&gt;Le nom de la méthode qui appelle &lt;code&gt;defer_to_actionrecord_query()&lt;/code&gt; ainsi que ses arguments peuvent être obtenus depuis la &lt;a href="http://php.net/manual/fr/function.debug-backtrace.php" target="_blank"&gt;trace d'exécution&lt;/a&gt;, le code devient alors très simple :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="reserved"&gt;class&lt;/span&gt; WdModel extends WdDatab&lt;span class="reserved"&gt;as&lt;/span&gt;eTable&lt;br /&gt;
&lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
    ...&lt;br /&gt;
    &lt;span class="reserved"&gt;private&lt;/span&gt; &lt;span class="reserved"&gt;function&lt;/span&gt; &lt;span class="function"&gt;defer_to_actionrecord_query&lt;/span&gt;&lt;span class="symbol"&gt;()&lt;/span&gt;&lt;br /&gt;
    &lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
        &lt;span class="variable"&gt;$trace&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="function"&gt;debug_backtrace&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="reserved"&gt;false&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
        &lt;span class="variable"&gt;$arq&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="reserved"&gt;new&lt;/span&gt; &lt;span class="function"&gt;WdActiveRecordQuery&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$this&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
        &lt;span class="reserved"&gt;return&lt;/span&gt; &lt;span class="function"&gt;call_user_func_array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$arq&lt;/span&gt;, &lt;span class="variable"&gt;$trace[1][&lt;/span&gt;&lt;span class="string"&gt;'function'&lt;/span&gt;&lt;span class="symbol"&gt;])&lt;/span&gt;, &lt;span class="variable"&gt;$trace[1][&lt;/span&gt;&lt;span class="string"&gt;'args'&lt;/span&gt;&lt;span class="symbol"&gt;])&lt;/span&gt;;&lt;br /&gt;
    &lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
    &lt;span class="reserved"&gt;public&lt;/span&gt; &lt;span class="reserved"&gt;function&lt;/span&gt; &lt;span class="function"&gt;joins&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$expression&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
    &lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
        &lt;span class="reserved"&gt;return&lt;/span&gt; &lt;span class="variable"&gt;$this&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;defer_to_actionrecord_query&lt;/span&gt;&lt;span class="symbol"&gt;()&lt;/span&gt;;&lt;br /&gt;
    &lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
    &lt;span class="reserved"&gt;public&lt;/span&gt; &lt;span class="reserved"&gt;function&lt;/span&gt; &lt;span class="function"&gt;select&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$expression&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
    &lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
        &lt;span class="reserved"&gt;return&lt;/span&gt; &lt;span class="variable"&gt;$this&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;defer_to_actionrecord_query&lt;/span&gt;&lt;span class="symbol"&gt;()&lt;/span&gt;;&lt;br /&gt;
    &lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
    &lt;span class="reserved"&gt;public&lt;/span&gt; &lt;span class="reserved"&gt;function&lt;/span&gt; &lt;span class="function"&gt;where&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$conditions&lt;/span&gt;, &lt;span class="variable"&gt;$conditions_args&lt;/span&gt;&lt;span class="symbol"&gt;=&lt;/span&gt;null&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
    &lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
        &lt;span class="reserved"&gt;return&lt;/span&gt; &lt;span class="variable"&gt;$this&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;defer_to_actionrecord_query&lt;/span&gt;&lt;span class="symbol"&gt;()&lt;/span&gt;;&lt;br /&gt;
    &lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
    &lt;span class="reserved"&gt;public&lt;/span&gt; &lt;span class="reserved"&gt;function&lt;/span&gt; &lt;span class="function"&gt;order&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$order&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
    &lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
        &lt;span class="reserved"&gt;return&lt;/span&gt; &lt;span class="variable"&gt;$this&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;defer_to_actionrecord_query&lt;/span&gt;&lt;span class="symbol"&gt;()&lt;/span&gt;;&lt;br /&gt;
    &lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;span class="symbol"&gt;}&lt;/span&gt;&lt;/code&gt;

&lt;p&gt;Vous l'avez surement compris le but de cet article était également de présenter une utilisation pratique de la trace d'exécution, pour autre chose que du debug. En écrivant ces lignes je me suis pris à rêver à une variable magique &lt;code&gt;$_TRACE&lt;/code&gt; qui permettrait de consulter plus simplement la trace d'exécution en oubliant quelques méthodes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;debug_backtrace&lt;/code&gt; &gt;&gt; &lt;code&gt;$_TRACE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func_get_args()&lt;/code&gt; &gt;&gt; &lt;code&gt;$_TRACE[0]['args']&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func_get_arg(1)&lt;/code&gt; &gt;&gt; &lt;code&gt;$_TRACE[0]['args'][1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func_num_args()&lt;/code&gt; &gt;&gt; &lt;code&gt;count($_TRACE[0]['args'])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Le principe de délégation est assez simple à mettre en place et permet d'étendre les fonctionnalités d'un objet de façon transparente. Si vous souhaitez en savoir plus sur la délégation je vous invite à consulter les articles &lt;a href="http://en.wikipedia.org/wiki/Delegation_pattern" target="_blank"&gt;Delegation pattern&lt;/a&gt; et &lt;a href="http://en.wikipedia.org/wiki/Delegation_%28programming%29" target="_blank"&gt;Delegation (programming)&lt;/a&gt; sur Wikipedia.&lt;/p&gt;

&lt;p&gt;Dans un prochain article nous verrons ensemble les fonctionnalités de la classe &lt;a href="https://github.com/Weirdog/WdCore/blob/master/wdobject.php" target="_blank"&gt;&lt;code&gt;WdObject&lt;/code&gt;&lt;/a&gt; qui permet de faire du &lt;a href="http://en.wikipedia.org/wiki/Mixin" target="_blank"&gt;Mixin&lt;/a&gt; en &lt;span class="caps"&gt;PHP&lt;/span&gt; d'une façon très simple.&lt;/p&gt;
&lt;img src="http://feeds.feedburner.com/~r/wdblog/~4/Gke1GshTmGg" height="1" width="1"/&gt;</content>
	<feedburner:origLink>http://www.weirdog.com/blog/php/la-delegation-de-methodes.html</feedburner:origLink></entry>
	<entry>
		<title>Nouvelle référence pour le Publishr : le pôle de compétitivité « Cancer-Bio-Santé »</title>
		<link href="http://feedproxy.google.com/~r/wdblog/~3/bXfS7Gb1VL4/nouvelle-reference-publishr-cancer-bio-sante.html" />
		<id>tag:weirdog.com,2010-11-29:nouvelle-reference-publishr-cancer-bio-sante</id>
		<updated>2010-12-12T13:54:22+01:00</updated>
		<published>2010-12-11T18:06:13+01:00</published>
		<author>
			<name>Laviale Olivier</name>
		</author>
		<category term="Publishr" />
		<content type="html" xml:lang="fr">&lt;p&gt;Pour sa refonte, le &lt;a href="http://www.cancerbiosante.fr" target="_blank"&gt;site du pôle de compétitivité « Cancer-Bio-Santé »&lt;/a&gt; de Toulouse abandonne &lt;span class="caps"&gt;SPIP&lt;/span&gt; au profit du &lt;a href="http://www.wdpublisher.com" target="_blank"&gt;Publishr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://weirdog.com/repository/files/image/370-reference-cbs.jpeg" alt="reference-cbs" width="600" height="200" align="middle" /&gt;&lt;/p&gt;

&lt;p&gt;Le nouveau site tire parti de deux caractéristiques très particulières du &lt;span class="caps"&gt;CMS&lt;/span&gt; : &lt;strong&gt;les contenus hérités&lt;/strong&gt; et les &lt;strong&gt;éditeurs personnalisés&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Contenus hérités&lt;/h2&gt;

&lt;p&gt;Sur le site &lt;a href="http://www.cancerbiosante.fr" target="_blank"&gt;cancerbiosante.fr&lt;/a&gt;, l'image de fond de la bannière est différente pour chacune des rubriques principales. Pour autant, on ne va pas s'amuser à définir l'image à utiliser pour chacune des pages des rubriques, ce serait fastidieux. Au contraire, les pages des rubriques vont simplement utiliser l'image définie par leur rubrique. C'est ce que l'on considère comme du &lt;strong&gt;contenu hérité&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Lorsqu'il est défini comme pouvant être hérité, le contenu d'une page parente est utilisé par une page enfant, si celle-ce ne le définit pas. C'est ce qui se passe pour les pages des rubriques : chaque rubrique définit une image de fond qui est ensuite réutilisée par ses pages enfants. C'est très simple à mettre en œuvre puisqu'il suffit d'ajouter l'attribut « &lt;code&gt;inherit&lt;/code&gt; » à la balise « &lt;code&gt;wdp:page:content&lt;/code&gt; », comme ceci :&lt;/p&gt;

&lt;code class="html"&gt;&lt;span class="markup"&gt;&amp;lt;wdp:page:content&lt;/span&gt; &lt;span class="attribute"&gt;id&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;background&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute"&gt;title&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;Image de fond de la bannière&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute"&gt;editor&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;adjustimage&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute"&gt;inherit&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;inherit&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute"&gt;/&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;

&lt;p&gt;L'éditeur pour la zone de contenu apparait comme d'habitude dans la section « Contenu » du formulaire d'édition de la page, avec un texte de description indiquant que le contenu peut être hérité.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://weirdog.com/repository/files/image/371-reference-cbs-editor.jpeg" alt="reference-cbs-editor" width="560" height="470" align="middle" /&gt;&lt;/p&gt;

&lt;p&gt;Si le contenu est effectivement hérité, un lien avec le nom de la page définissant le contenu apparait, comme le montre l'illustration suivante :&lt;/p&gt;

&lt;p&gt;&lt;img src="http://weirdog.com/repository/files/image/374-reference-cbs-inherited.png" alt="reference-cbs-inherited" width="520" height="120" align="middle" /&gt;&lt;/p&gt;

&lt;p&gt;Ce même principe est à l'œuvre pour l'encart « Médiathèque » de la bannière, qui peut être défini indépendamment pour chacune des pages du site.&lt;/p&gt;

&lt;p&gt;Maintenant que nous en savons un peu plus sur les contenus, intéressons-nous aux types de contenus qui peuvent apparaitre sur les pages. En effet, toutes les pages ne sont pas simplement composées de blocs de texte que l'on peut facilement éditer en utilisant un éditeur &lt;span class="caps"&gt;RTE&lt;/span&gt;, parfois le contenu de certaines pages est complexe et nécessite des connaissances en &lt;span class="caps"&gt;HTML&lt;/span&gt;, ce que la majorité des utilisateurs ne possèdent pas. Alors, plutôt que présenter du code &lt;span class="caps"&gt;HTML&lt;/span&gt; complexe à éditer dans un éditeur &lt;span class="caps"&gt;RTE&lt;/span&gt;, en espérant qu'aucune balise &lt;em&gt;invisible&lt;/em&gt; ne saute, ou d'exposer ce code brut dans un champ texte, on préférera concevoir un &lt;strong&gt;éditeur personnalisé&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Éditeurs personnalisés pour contenus complexes&lt;/h2&gt;

&lt;p&gt;Parce que les éditeurs utilisés pour éditer les contenus des pages sont des instances de la classe &lt;a href="https://github.com/Weirdog/WdPublisher/blob/master/protected/modules/editor/includes/wdeditorelement.php" target="_blank"&gt;&lt;code&gt;WdEditorElement&lt;/code&gt;&lt;/a&gt;, il est très simple pour un développeur de concevoir un éditeur personnalisé pour répondre à des besoins particuliers. Considérons le schéma suivant, disponible sur la page « &lt;a href="http://www.cancerbiosante.fr/fr/projets/prochaines-labellisations.html" target="_blank"&gt;Prochaine labellisation&lt;/a&gt; » :&lt;/p&gt;

&lt;p&gt;&lt;img src="http://weirdog.com/repository/files/image/373-reference-cbs-custom-editor-render.jpeg" alt="reference-cbs-custom-editor-render" width="600" height="270" align="middle" /&gt;&lt;/p&gt;

&lt;p&gt;Onze zones de ce schéma sont contribuables. Il y a 4 dates (qui sont optionnelles, et n'apparaissent pas sur le schéma au moment de la capture) accompagnées de 4 étiquettes et 3 titres pour les flèches. On pourrait présenter au contributeur onze éditeurs de type « chaine de caractères », mais ce serait un désastre ergonomique. À la place, on préfèrera concevoir un éditeur personnalisé qui se chargera de recueillir les données des différents champs, comme celui illustré ci-dessous :&lt;/p&gt;

&lt;p&gt;&lt;a href="http://weirdog.com/repository/files/image/372-reference-cbs-custom-editor.jpeg" rel="lightbox[]" target="_blank"&gt;&lt;img src="http://weirdog.com/api/resources.images/372/thumbnail?w=600&amp;amp;method=fixed-width&amp;amp;quality=80" alt="reference-cbs-custom-editor" width="600" align="middle" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Un gabarit pour la mise en forme des données&lt;/h3&gt;

&lt;p&gt;Bien que l'éditeur puisse transformer ses données en éléments &lt;span class="caps"&gt;HTML&lt;/span&gt; lors de la phase de rendu, on préfèrera utiliser un gabarit pour plus de souplesse dans leur mise en forme. Voici celui utilisé pour notre schéma :&lt;/p&gt;

&lt;code class="html"&gt;&lt;span class="markup"&gt;&amp;lt;wdp:page:content&lt;/span&gt; &lt;span class="attribute"&gt;id&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;schema&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute"&gt;title&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;Schéma de labellisation&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute"&gt;editor&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;timeline&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
    &lt;span class="markup"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute"&gt;id&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;schema-date-label-1&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute"&gt;class&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
        &lt;span class="markup"&gt;&amp;lt;h3&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;#{@date_1}&lt;span class="markup"&gt;&amp;lt;/h3&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
        &lt;span class="markup"&gt;&amp;lt;p&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;#{@date_label_1}&lt;span class="markup"&gt;&amp;lt;/p&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
    &lt;span class="markup"&gt;&amp;lt;/div&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
    &lt;br /&gt;
    &lt;span class="markup"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute"&gt;id&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;schema-date-label-2&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute"&gt;class&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;label right&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
        &lt;span class="markup"&gt;&amp;lt;h3&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;#{@date_2}&lt;span class="markup"&gt;&amp;lt;/h3&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
        &lt;span class="markup"&gt;&amp;lt;p&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;#{@date_label_2}&lt;span class="markup"&gt;&amp;lt;/p&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
    &lt;span class="markup"&gt;&amp;lt;/div&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
    &lt;br /&gt;
    &lt;span class="markup"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute"&gt;id&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;schema-date-label-3&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute"&gt;class&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;label bottom&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
        &lt;span class="markup"&gt;&amp;lt;h3&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;#{@date_3}&lt;span class="markup"&gt;&amp;lt;/h3&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
        &lt;span class="markup"&gt;&amp;lt;p&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;#{@date_label_3}&lt;span class="markup"&gt;&amp;lt;/p&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
    &lt;span class="markup"&gt;&amp;lt;/div&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
    &lt;span class="markup"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute"&gt;id&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;schema-date-label-4&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute"&gt;class&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;label bottom right&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
        &lt;span class="markup"&gt;&amp;lt;h3&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;#{@date_2}&lt;span class="markup"&gt;&amp;lt;/h3&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
        &lt;span class="markup"&gt;&amp;lt;p&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;#{@date_label_4}&lt;span class="markup"&gt;&amp;lt;/p&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
    &lt;span class="markup"&gt;&amp;lt;/div&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
    &lt;br /&gt;
    &lt;span class="markup"&gt;&amp;lt;ol&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
        &lt;span class="markup"&gt;&amp;lt;li&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;#{@arrow_1}&lt;span class="markup"&gt;&amp;lt;/li&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
        &lt;span class="markup"&gt;&amp;lt;li&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;#{@arrow_2}&lt;span class="markup"&gt;&amp;lt;/li&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
        &lt;span class="markup"&gt;&amp;lt;li&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;#{@arrow_3}&lt;span class="markup"&gt;&amp;lt;/li&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
    &lt;span class="markup"&gt;&amp;lt;/ol&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class="markup"&gt;&amp;lt;/wdp:page:content&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;

&lt;blockquote&gt;
  &lt;p&gt;Afin de permettre au webdesigner de cibler simplement les contenus rendus par les éditeurs, chacun d'eux est automatiquement enveloppé dans un élément &lt;code&gt;DIV&lt;/code&gt; ayant pour identifiant « &lt;code&gt;content-&amp;lt;content_id&amp;gt;&lt;/code&gt; » et pour classe « &lt;code&gt;editor-&amp;lt;editor_id&amp;gt;&lt;/code&gt; ». On notera que l'enveloppe n'est ajoutée que dans les gabarits &lt;span class="caps"&gt;HTML&lt;/span&gt;, et que l'on peut l'éviter en définissant l'attribut « &lt;code&gt;no-wrap&lt;/code&gt; ».&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;À découvrir&lt;/h2&gt;

&lt;p&gt;Le site possède également une &lt;a href="http://www.cancerbiosante.fr/fr/espace-presse/mediatheque/" target="_blank"&gt;médiathèque&lt;/a&gt;, un &lt;a href="http://www.cancerbiosante.fr/fr/espace-adherent/" target="_blank"&gt;espace réservé&lt;/a&gt; où les adhérents peuvent contribuer au site ou simplement modifier leur fiche, ainsi qu'un &lt;a href="http://www.cancerbiosante.fr/fr/espace-presse/communiques-de-presse/" target="_blank"&gt;espace presse&lt;/a&gt; très fourni.&lt;/p&gt;

&lt;p&gt;Je vous laisse &lt;a href="http://www.cancerbiosante.fr/" target="_blank"&gt;découvrir le site&lt;/a&gt; réalisé par l'agence &lt;a href="http://www.hima360.com/" target="_blank"&gt;Hima360&lt;/a&gt;. Bonne visite.&lt;/p&gt;
&lt;img src="http://feeds.feedburner.com/~r/wdblog/~4/bXfS7Gb1VL4" height="1" width="1"/&gt;</content>
	<feedburner:origLink>http://www.weirdog.com/blog/publishr/nouvelle-reference-publishr-cancer-bio-sante.html</feedburner:origLink></entry>
	<entry>
		<title>Ajouter automatiquement une cible vide aux liens externes</title>
		<link href="http://feedproxy.google.com/~r/wdblog/~3/5ES1VTjNWAg/ajouter-automatiquement-une-cible-vide-aux-liens-externes.html" />
		<id>tag:weirdog.com,2010-10-05:ajouter-automatiquement-une-cible-vide-aux-liens-externes</id>
		<updated>2010-12-26T09:26:23+01:00</updated>
		<published>2010-12-11T12:34:15+01:00</published>
		<author>
			<name>Laviale Olivier</name>
		</author>
		<category term="PHP" />
		<content type="html" xml:lang="fr">&lt;p&gt;C'est avec un pincement au cœur que je vous livre une fonction qui vous permettra d'ajouter automatiquement une cible vide (« target=_blank ») aux liens externes contenus dans une chaine de caractères.&lt;/p&gt;

&lt;p&gt;Depuis que je crée des sites ou des logiciels, j'ai toujours luté pour ne pas ouvrir les liens externes dans de nouvelles fenêtres, parce que je crois fermement qu'il faut laisser le contrôle de l'interface à l'utilisateur. Malheureusement, on crée des sites pour des clients, et ces clients craignent que leurs visiteurs disparaissent dans leur visite, alors voici la bête :&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="reserved"&gt;function&lt;/span&gt; &lt;span class="function"&gt;handle_external_anchors&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$html&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
&lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
    &lt;span class="reserved"&gt;return&lt;/span&gt; &lt;span class="function"&gt;preg_replace_callback&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'#&amp;lt;a\s+[^&amp;gt;]+&amp;gt;#'&lt;/span&gt;, &lt;span class="string"&gt;'handle_external_anchors_callback'&lt;/span&gt;, &lt;span class="variable"&gt;$html&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="reserved"&gt;function&lt;/span&gt; &lt;span class="function"&gt;handle_external_anchors_callback&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$matches&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
&lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
    &lt;span class="variable"&gt;$str&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="function"&gt;array_shift&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$matches&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
    &lt;span class="function"&gt;preg_match_all&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'#([a-z]+)\=&amp;quot;([^&amp;quot;]+)#'&lt;/span&gt;, &lt;span class="variable"&gt;$str&lt;/span&gt;, &lt;span class="variable"&gt;$matches&lt;/span&gt;, &lt;span class="number"&gt;0&lt;/span&gt;, PREG_SET_ORDER&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
    &lt;span class="reserved"&gt;if&lt;/span&gt; &lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;empty&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$matches[1]&lt;/span&gt;&lt;span class="symbol"&gt;))&lt;/span&gt;&lt;br /&gt;
    &lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
        &lt;span class="reserved"&gt;return&lt;/span&gt; &lt;span class="variable"&gt;$str&lt;/span&gt;;&lt;br /&gt;
    &lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
    &lt;span class="variable"&gt;$attributes&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="function"&gt;array_combine&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$matches[1]&lt;/span&gt;, &lt;span class="variable"&gt;$matches[2]&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
    &lt;span class="reserved"&gt;if&lt;/span&gt; &lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;isset&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$attributes[&lt;/span&gt;&lt;span class="string"&gt;'href'&lt;/span&gt;&lt;span class="symbol"&gt;]))&lt;/span&gt;&lt;br /&gt;
    &lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
        &lt;span class="reserved"&gt;if&lt;/span&gt; &lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;preg_match&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'#^http(s)?://#'&lt;/span&gt;, &lt;span class="variable"&gt;$attributes[&lt;/span&gt;&lt;span class="string"&gt;'href'&lt;/span&gt;&lt;span class="symbol"&gt;]&lt;/span&gt;, &lt;span class="variable"&gt;$m&lt;/span&gt;&lt;span class="symbol"&gt;))&lt;/span&gt;&lt;br /&gt;
        &lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
            &lt;span class="variable"&gt;$attributes[&lt;/span&gt;&lt;span class="string"&gt;'target'&lt;/span&gt;&lt;span class="symbol"&gt;]&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="string"&gt;'_blank'&lt;/span&gt;;&lt;br /&gt;
        &lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
    &lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
    &lt;span class="variable"&gt;$str&lt;/span&gt; &lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="string"&gt;'&amp;lt;a'&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
    &lt;span class="reserved"&gt;foreach&lt;/span&gt; &lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$attributes&lt;/span&gt; &lt;span class="reserved"&gt;as&lt;/span&gt; &lt;span class="variable"&gt;$attribute&lt;/span&gt; &lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="variable"&gt;$value&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
    &lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
        &lt;span class="variable"&gt;$str&lt;/span&gt; .&lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="string"&gt;' '&lt;/span&gt; . &lt;span class="variable"&gt;$attribute&lt;/span&gt; . &lt;span class="string"&gt;'=&amp;quot;'&lt;/span&gt; . &lt;span class="variable"&gt;$value&lt;/span&gt; . &lt;span class="string"&gt;'&amp;quot;'&lt;/span&gt;;&lt;br /&gt;
    &lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
    &lt;span class="variable"&gt;$str&lt;/span&gt; .&lt;span class="symbol"&gt;=&lt;/span&gt; &lt;span class="string"&gt;'&amp;gt;'&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
    &lt;span class="reserved"&gt;return&lt;/span&gt; &lt;span class="variable"&gt;$str&lt;/span&gt;;&lt;br /&gt;
&lt;span class="symbol"&gt;}&lt;/span&gt;&lt;/code&gt;

&lt;p&gt;La fonction &lt;code&gt;handle_external_anchors()&lt;/code&gt; cherche les liens dans la chaine de caractère qu'on lui fourni et ajoute &lt;code&gt;target = "_blank"&lt;/code&gt; à ceux qui ont une adresse qui commence par « http:// » ou « https:// ».&lt;/p&gt;

&lt;p&gt;C'est mal, mais c'est fait.&lt;/p&gt;
&lt;img src="http://feeds.feedburner.com/~r/wdblog/~4/5ES1VTjNWAg" height="1" width="1"/&gt;</content>
	<feedburner:origLink>http://www.weirdog.com/blog/php/ajouter-automatiquement-une-cible-vide-aux-liens-externes.html</feedburner:origLink></entry>
	<entry>
		<title>Un bouton qui flotte pour enregistrer plus vite</title>
		<link href="http://feedproxy.google.com/~r/wdblog/~3/0xffcTh5kBQ/un-bouton-qui-flotte-pour-enregistrer-plus-vite.html" />
		<id>tag:weirdog.com,2010-12-08:un-bouton-qui-flotte-pour-enregistrer-plus-vite</id>
		<updated>2010-12-08T11:34:38+01:00</updated>
		<published>2010-12-08T11:09:11+01:00</published>
		<author>
			<name>Laviale Olivier</name>
		</author>
		<category term="Publishr" />
		<content type="html" xml:lang="fr">&lt;p&gt;Parfois les formulaires d'éditions sont longs, et c'est ennuyeux d'avoir à faire défiler la fenêtre pour atteindre le bouton « Enregistrer » situé tout en bas, alors que l'on a modifié le titre de notre article en le saisissant dans le premier champ. Pour palier un peu à cette situation, le &lt;span class="caps"&gt;CMS&lt;/span&gt; Publishr propose un bouton « Enregistrer » flottant, lorsque celui du formulaire est hors de portée :&lt;/p&gt;

&lt;p&gt;&lt;img src="http://weirdog.com/repository/files/image/366-float-save-action.png" alt="float-save-action" width="420" height="200" align="middle" /&gt;&lt;/p&gt;

&lt;p&gt;Le mode d'enregistrement peut être modifié depuis la bulle en cliquant sur le mode actuel, une liste des modes disponibles apparait alors permettant à l'utilisateur de changer de mode :&lt;/p&gt;

&lt;p&gt;&lt;img src="http://weirdog.com/repository/files/image/367-float-save-modes.png" alt="float-save-modes" width="420" height="200" align="middle" /&gt;&lt;/p&gt;

&lt;p&gt;Cette petite bulle, assez discrète, soulagera la molette de votre souris et évitera bien des aller-retours, notamment lorsque le mode d'enregistrement est réglé sur « Enregistrer et continuer l'édition », qui utilise depuis peu &lt;span class="caps"&gt;XHR&lt;/span&gt; pour enregistrer les données sans recharger la page.&lt;/p&gt;
&lt;img src="http://feeds.feedburner.com/~r/wdblog/~4/0xffcTh5kBQ" height="1" width="1"/&gt;</content>
	<feedburner:origLink>http://www.weirdog.com/blog/publishr/un-bouton-qui-flotte-pour-enregistrer-plus-vite.html</feedburner:origLink></entry>
	<entry>
		<title>Ajouter un lien de démonstration aux articles de mon blog</title>
		<link href="http://feedproxy.google.com/~r/wdblog/~3/z4gTtCXG2o4/ajouter-un-lien-de-demonstration-aux-articles-de-mon-blog.html" />
		<id>tag:weirdog.com,2010-11-06:ajouter-un-lien-de-demonstration-aux-articles-de-mon-blog</id>
		<updated>2010-11-28T04:00:41+01:00</updated>
		<published>2010-11-07T23:42:04+01:00</published>
		<author>
			<name>Laviale Olivier</name>
		</author>
		<category term="Publishr" />
		<content type="html" xml:lang="fr">&lt;p&gt;Vous l'avez peut-être remarqué, certains de mes articles sont accompagnés d'une démonstration. J'avais l'habitude de la mentionner dans l'article, mais récemment j'ai eu envie de quelque chose de plus &lt;em&gt;visuel&lt;/em&gt;, genre un bouton rose avec « démo » marqué dessus. Pour cela j'avais besoin de pouvoir associer une &lt;span class="caps"&gt;URL&lt;/span&gt; de démonstration à mes articles, et après 20 secondes d'efforts pour arriver à mes fins, je me dis que ça pourrait être intéressant de partager la démarche à suivre, histoire de présenter quelques fonctionnalités de mon &lt;a href="http://weirdog.com/wdcore/" target="_blank"&gt;framework WdCore&lt;/a&gt; et de mon &lt;a href="http://www.weirdog.com/" target="_blank"&gt;&lt;span class="caps"&gt;CMS&lt;/span&gt; WdPublisher&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Au cours de ce bref mais néanmoins fascinant voyage, nous allons découvrir les évènements, les fonctions de rappel, les classes qui se chargent toutes seules, la modification d'un formulaire d'édition, les métadonnées et plein de choses palpitantes. Commençons donc très vite par un état des lieux.&lt;/p&gt;

&lt;h2&gt;Il nous faut un nouveau champ&amp;nbsp;!&lt;/h2&gt;

&lt;p&gt;Qui dit donnée supplémentaire, dit nouveau champ pour saisir cette donnée. En l'état, le module « Articles » propose, entre autre, les champs suivants&amp;nbsp;:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://weirdog.com/repository/files/image/358-demo-url-field-before.png" alt="358;before" width="600" height="376" align="middle" /&gt;&lt;/p&gt;

&lt;p&gt;Nous avons donc besoin d'un nouveau champ de type texte pour pouvoir saisir l'URL de la démonstration associée à l'article. L'URL sera enregistrée dans les métadonnées de mon article. D'ailleurs, avant de poursuivre, j'aimerai juste dire deux mots sur les métadonnées, sinon on risque de se perdre.&lt;/p&gt;

&lt;h3&gt;Les métadonnées&lt;/h3&gt;

&lt;p&gt;Les métadonnées sont des données supplémentaires qui peuvent être associées aux objets. Elles sont stockées dans leur propre espace et ne demandent pas de modifier la structure de l'objet auquel elles sont associées. Elles sont ensuite accessibles par la propriété &lt;code&gt;metas&lt;/code&gt; de l'objet. C'est simple, et c'est pratique, alors passons sans plus attendre à l'ajout d'un champ supplémentaire à notre formulaire d'édition.&lt;/p&gt;

&lt;h2&gt;Ajouter un champ supplémentaire au formulaire d'édition&lt;/h2&gt;

&lt;p&gt;Le formulaire d'édition est une instance de la classe &lt;code&gt;WdSectionedForm&lt;/code&gt;, qui est une sous-classe de la classe &lt;code&gt;WdForm&lt;/code&gt;. Cette classe permet entre autre de définir des groupes d'éléments, on peut donc définir les éléments du formulaire dans l'ordre que l'on veut et arranger tout cela avec les attributs &lt;code&gt;WdElement::T_GROUP&lt;/code&gt; et &lt;code&gt;WdElement::T_WEIGHT&lt;/code&gt;. Notre nouvel élément fera partie du groupe &lt;em&gt;primaire&lt;/em&gt;, alors pas la peine de s'ennuyer avec l'attribut &lt;code&gt;T_GROUP&lt;/code&gt;, par contre on le placera avant le champ « Date » grâce à l'attribut &lt;code&gt;T_WEIGHT&lt;/code&gt;, pour que ce soit plus joli.&lt;/p&gt;

&lt;p&gt;Le formulaire d'édition est donc un objet et les éléments qui le composent se trouvent dans un arbre d'objet. C'est lorsque l'objet est transformé en chaine de caractères que la magie opère&amp;nbsp;: les éléments sont ordonnés, les groupes sont formés et tout ce beau monde s'assemble pour terminer en fabuleux code &lt;span class="caps"&gt;HTML&lt;/span&gt;. Avant cette étape finale, l'évènement &lt;code&gt;alter.block.edit&lt;/code&gt; est déclenché, donnant ainsi la possibilité à ceux qui le désirent de modifier les éléments et les attributs (&lt;code&gt;tags&lt;/code&gt;) du formulaire. À nous de créer une fonction de rappel pour cet évènement, qui nous permettra de modifier les attributs du formulaire pour y ajouter notre élément.&lt;/p&gt;

&lt;h3&gt;Une fonction de rappel pour l'évènement &lt;code&gt;alter.block.edit&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;En guise de fonction de rappel pour l'évènement &lt;code&gt;alter.block.edit&lt;/code&gt; nous ajoutons une méthode statique publique à la classe &lt;code&gt;weirdog_WdHooks&lt;/code&gt;. Cela à deux avantages&amp;nbsp;: nous ne polluons pas l'espace public avec un énième fonction et nous pouvons utiliser la fonctionnalité de chargement automatique des classes du framework &lt;a href="http://weirdog.com/wdcore/" target="_blank"&gt;WdCore&lt;/a&gt;, pour charger à la demande la classe et la fonction de rappel.&lt;/p&gt;

&lt;p&gt;Éditons à présent le fichier « /protected/includes/hooks.php » pour y ajouter notre classe et notre fonction de rappel&amp;nbsp;:&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="reserved"&gt;class&lt;/span&gt;&amp;nbsp;weir&lt;span class="reserved"&gt;do&lt;/span&gt;g_WdHooks&lt;br /&gt;
&lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="reserved"&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class="reserved"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="reserved"&gt;function&lt;/span&gt;&amp;nbsp;&lt;span class="function"&gt;event_alter_block_edit&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;WdEvent&amp;nbsp;&lt;span class="variable"&gt;$event&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="variable"&gt;$event&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;tags&lt;/span&gt;&amp;nbsp;&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;nbsp;wd_array_merge_recursive&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="variable"&gt;$event&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="variable"&gt;tags&lt;/span&gt;,&amp;nbsp;array&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WdElement::T_CHILDREN&amp;nbsp;&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&amp;nbsp;array&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="string"&gt;'metas[demo_url]'&lt;/span&gt;&amp;nbsp;&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span class="reserved"&gt;new&lt;/span&gt;&amp;nbsp;WdElement&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WdElement::E_TEXT,&amp;nbsp;array&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WdForm::T_LABEL&amp;nbsp;&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span class="string"&gt;'URL de démonstration'&lt;/span&gt;,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WdElement::T_WEIGHT&amp;nbsp;&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span class="string"&gt;'subtitle'&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;span class="symbol"&gt;}&lt;/span&gt;&lt;span class="delimiter"&gt;&lt;br /&gt;
&lt;br /&gt;
?&amp;gt;&lt;/span&gt;&lt;/code&gt;

&lt;p&gt;Comme vous pouvez le voir, ce n'est pas bien compliqué. Les attributs du formulaire se trouvent dans la propriété &lt;code&gt;tags&lt;/code&gt; de l'évènement, donc tout ce que l'on a à faire c'est d'y mélanger nos propres attributs. Comme nous l'avons vu plus haut, on utilise l'attribut &lt;code&gt;T_WEIGHT&lt;/code&gt; pour placer notre élément après l'élément « Soustitre ».&lt;/p&gt;

&lt;p&gt;Maintenant que la classe est prête, modifions la configuration pour déclarer la classe &lt;code&gt;weirdog_WdHooks&lt;/code&gt; et la fonction de rappel pour l'évènement &lt;code&gt;alter.block.edit&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Ajouter une classe aux classes à charger automatiquement&lt;/h2&gt;

&lt;p&gt;Le framework WdCore offre le chargement automatique des classes déclarées dans le tableau &lt;code&gt;autoload&lt;/code&gt; de la configuration &lt;code&gt;core&lt;/code&gt;. Celui de notre application se trouve dans le fichier « /protected/config/core.php »&amp;nbsp;:&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="reserved"&gt;return&lt;/span&gt;&amp;nbsp;array&lt;br /&gt;
&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="string"&gt;'autoload'&lt;/span&gt;&amp;nbsp;&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&amp;nbsp;array&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="string"&gt;'weirdog_WdHooks'&lt;/span&gt;&amp;nbsp;&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span class="variable"&gt;$root&lt;/span&gt;&amp;nbsp;.&amp;nbsp;&lt;span class="string"&gt;'/includes/hooks.php'&lt;/span&gt;,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;)&lt;/span&gt;,&lt;br /&gt;
&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;br /&gt;
&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;span class="delimiter"&gt;&lt;br /&gt;
&lt;br /&gt;
?&amp;gt;&lt;/span&gt;&lt;/code&gt;

&lt;p&gt;Enregistrons maintenant notre fonction de rappel pour l'évènement.&lt;/p&gt;

&lt;h2&gt;Ajouter une fonction de rappel à un évènement&lt;/h2&gt;

&lt;p&gt;Pour ajouter une fonction de rappel à un évènement, il suffit de l'ajouter à la configuration &lt;code&gt;events&lt;/code&gt;. Celle de notre application se trouve dans le fichier « /protected/config/events.php »&amp;nbsp;:&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="reserved"&gt;return&lt;/span&gt;&amp;nbsp;array&lt;br /&gt;
&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="string"&gt;'alter.block.edit'&lt;/span&gt;&amp;nbsp;&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&amp;nbsp;array&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="function"&gt;array&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'weirdog_WdHooks'&lt;/span&gt;,&amp;nbsp;&lt;span class="string"&gt;'event_alter_block_edit'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;,&lt;br /&gt;
&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="string"&gt;'instanceof'&lt;/span&gt;&amp;nbsp;&lt;span class="symbol"&gt;=&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span class="string"&gt;'contents_articles_WdModule'&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;)&lt;/span&gt;&lt;br /&gt;
&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;span class="delimiter"&gt;&lt;br /&gt;
&lt;br /&gt;
?&amp;gt;&lt;/span&gt;&lt;/code&gt;

&lt;p&gt;À noter que l'appel à notre fonction de rappel peut-être filtré. Pour éviter de coller notre nouvel élément à tous les formulaires d'édition, on utilise le paramètre &lt;code&gt;instanceof&lt;/code&gt; qui nous permet de limiter la modification aux instances de la classe &lt;code&gt;contents_articles_WdModule&lt;/code&gt;, en gros le module qui gère les articles.&lt;/p&gt;

&lt;p&gt;L'élément « URL de démonstration » est maintenant disponible&amp;nbsp;:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://weirdog.com/repository/files/image/360-demo-url-field-after.png" alt="360;after" width="600" height="443" align="middle" /&gt;&lt;/p&gt;

&lt;p&gt;Passons à la création du lien dans notre article.&lt;/p&gt;

&lt;h2&gt;Afficher un lien vers l'URL de démonstration&lt;/h2&gt;

&lt;p&gt;Pour afficher un lien vers l'URL de démonstration il nous faut modifier le patron de l'article et y ajouter quelques lignes. À noter que lorsque le patron est évalué, l'article se trouve dans le &lt;code&gt;this&lt;/code&gt; du contexte, on peut donc utiliser son synonyme &lt;code&gt;@&lt;/code&gt; pour accéder à l'objet&amp;nbsp;:&lt;/p&gt;

&lt;code class="html"&gt;&lt;span class="markup"&gt;&amp;lt;wdp:if&lt;/span&gt;&amp;nbsp;&lt;span class="attribute"&gt;test&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;@metas.demo_url&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class="markup"&gt;&amp;lt;a&lt;/span&gt;&amp;nbsp;&lt;span class="attribute"&gt;href&lt;/span&gt;=&lt;span class="attribute"&gt;&lt;span class="string"&gt;&amp;quot;#{@metas.demo_url}&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;DÉMO&lt;span class="markup"&gt;&amp;lt;/a&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class="markup"&gt;&amp;lt;/wdp:if&lt;/span&gt;&lt;span class="markup"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;

&lt;p&gt;Et voici le stupéfiant résultat&amp;nbsp;:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://weirdog.com/repository/files/image/361-demo-url-field-result.jpeg" alt="361;result" width="240" height="400" align="middle" /&gt;&lt;/p&gt;
&lt;img src="http://feeds.feedburner.com/~r/wdblog/~4/z4gTtCXG2o4" height="1" width="1"/&gt;</content>
	<feedburner:origLink>http://www.weirdog.com/blog/publishr/ajouter-un-lien-de-demonstration-aux-articles-de-mon-blog.html</feedburner:origLink></entry>
	<entry>
		<title>Transfert asynchrone de fichiers avec les interfaces Javascript FileAPI et XHR</title>
		<link href="http://feedproxy.google.com/~r/wdblog/~3/virxgoxktN0/transfert-asynchrone-de-fichiers-avec-les-interfaces-javascript-fileapi-et-xhr.html" />
		<id>tag:weirdog.com,2010-10-27:transfert-asynchrone-de-fichiers-avec-les-interfaces-javascript-fileapi-et-xhr</id>
		<updated>2010-11-07T11:01:18+01:00</updated>
		<published>2010-11-05T00:57:32+01:00</published>
		<author>
			<name>Laviale Olivier</name>
		</author>
		<category term="Javascript" />
		<content type="html" xml:lang="fr">&lt;p&gt;Il faut bien le reconnaitre, transférer un fichier en utilisant un formulaire &lt;span class="caps"&gt;HTML&lt;/span&gt; n'est pas très glamour&amp;nbsp;: après avoir cliqué sur un vilain bouton, on choisit le fichier de nos rêves, on clique sur « envoyer » et on attend que le transfert se fasse, sans trop savoir ce qui se passe. Le manque de retour et le délai imposé par la méthode sont sans doute deux des raisons qui font du transfert asynchrone de fichiers – avec un retour sur sa progression – un des Saint Graal du web.&lt;/p&gt;

&lt;p&gt;Une des solutions les plus simples pour le transfert asynchrone de fichiers consiste à utiliser un objet Flash pour procéder au transfert en arrière plan, et afficher la progression du transfert grâce à une fonction de rappel.  Cela marche plutôt bien, quand on ne lui en demande pas trop… Aujourd'hui, la proposition &lt;a href="http://www.w3.org/TR/FileAPI/" target="_blank"&gt;FileAPI&lt;/a&gt; pointe le bout de son nez rusé avec la promesse d'une interface Javascript standard pour un transfert asynchrone de données par &lt;a href="http://fr.wikipedia.org/wiki/XMLHttpRequest" target="_blank"&gt;&lt;span class="caps"&gt;XHR&lt;/span&gt;&lt;/a&gt;. Une nouvelle solution pour nous libérer de Flash&amp;nbsp;?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Associé à cet article, vous attend une &lt;a href="http://www.weirdog.com/demos/fileapi-xhr/" target="_blank"&gt;démonstration de transfert asynchrone de fichiers avec les interfaces Javascript FileAPI et &lt;span class="caps"&gt;XHR&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Flash et ses limitations&lt;/h2&gt;

&lt;p&gt;J'utilise encore Flash dans mon &lt;span class="caps"&gt;CMS&lt;/span&gt; pour l'envoi asynchrone de fichiers mais, comme souvent avec Flash, il a fallu contourner quelques limitations (voire bugs) pour obtenir une solution à peu près satisfaisante. Dans les choses qui manquent et/ou qui fâchent il y a&amp;nbsp;: les cookies que l'on doit envoyer à la main, les types &lt;span class="caps"&gt;MIME&lt;/span&gt; des fichiers qui sont remplacés par « application/octet-stream », la valeur de retour tronquée de façon aléatoire, et récemment (avec la version 10.1.85.3) un arrêt total du fonctionnement sous Firefox.&lt;/p&gt;

&lt;p&gt;Autant de raisons qui m'ont poussé à chercher une nouvelle solution.&lt;/p&gt;

&lt;h2&gt;L'avènement de FileAPI&lt;/h2&gt;

&lt;p&gt;Cela fait maintenant un an que j'ai découvert &lt;a href="http://www.w3.org/TR/FileAPI/" target="_blank"&gt;FileAPI&lt;/a&gt;, en lisant l'article &lt;a href="http://hacks.mozilla.org/2009/12/w3c-fileapi-in-firefox-3-6/" target="_blank"&gt;W3C FileAPI in Firefox 3.6&lt;/a&gt; sur le blog &lt;a href="http://hacks.mozilla.org/" target="_blank"&gt;Mozilla Hack&lt;/a&gt;. Cette spécification, éditée par le comité &lt;a href="http://www.w3c.org/" target="_blank"&gt;W3C&lt;/a&gt;, propose une &lt;span class="caps"&gt;API&lt;/span&gt; permettant la représentation de fichiers au sein d'applications web, en exposant des interfaces pour la sélection de fichiers et l'accès à leurs données. Ce n'est pourtant qu'il y a quelques jours, en lisant l'article &lt;a href="https://developer.mozilla.org/en/Using_files_from_web_applications" target="_blank"&gt;Using files from web applications&lt;/a&gt;, que je me suis dis que j'avais pratiquement trouvé le bonheur, même si &lt;a href="https://developer.mozilla.org/en/Using_files_from_web_applications#Handling_the_upload_process_for_a_file.2c_asynchronously" target="_blank"&gt;l'exemple de Mozilla&lt;/a&gt; se &lt;em&gt;contente&lt;/em&gt; d'envoyer un morceau de texte.&lt;/p&gt;

&lt;p&gt;Il semblait pourtant qu'il ne manquait pas grand chose pour transférer des fichiers binaires. L'objet &lt;a href="http://www.w3.org/TR/XMLHttpRequest/" target="_blank"&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt; propose une méthode &lt;code&gt;sendAsBinary()&lt;/code&gt; – &lt;a href="https://developer.mozilla.org/en/xmlhttprequest#sendAsBinary%28%29" target="_blank"&gt;la version de Mozilla&lt;/a&gt; du moins – qui laisse rêveur. Toutefois l'article se termine sur une phrase penaude&amp;nbsp;: « This needs to be modified for working with binary data, too. ».&lt;/p&gt;

&lt;p&gt;Qu'à cela ne tienne, je serais celui qui modifie&amp;nbsp;!&lt;/p&gt;

&lt;h2&gt;La création de la requête de transfert&lt;/h2&gt;

&lt;p&gt;J'ai eu beau parcourir l'internet, pas grand chose à se mettre sous la dent… en tout cas rien qui ressemble à un transfert de type &lt;span class="caps"&gt;POST&lt;/span&gt;. Alors, armé de mon Firebug adoré, j'ai décortiqué la requête &lt;span class="caps"&gt;POST&lt;/span&gt; pour essayer de la reproduire afin de l'envoyer en binaire en &lt;span class="caps"&gt;XHR&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Je ne vais pas passer en revue toutes les étapes, qui, vous le verrez en consultant le code, sont assez simples. Voici juste un sommaire&amp;nbsp;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On obtient l'objet &lt;code&gt;File&lt;/code&gt; depuis un input de type &lt;code&gt;file&lt;/code&gt;, ou depuis un évènement &lt;code&gt;drop&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;On crée un objet &lt;code&gt;FileReader&lt;/code&gt; et on lui demande de charger notre fichier en tant que chaine binaire. À la fin de la lecture, l'évènement &lt;code&gt;loadend&lt;/code&gt; se déclenche.&lt;/li&gt;
&lt;li&gt;On crée un objet &lt;code&gt;XMLHttpRequest&lt;/code&gt; qui va nous servir a envoyer les données, et on récupère l'objet &lt;code&gt;XMLHttpRequestUpload&lt;/code&gt; de celui-ci pour y coller des observateurs qui nous servirons à suivre la progression du transfert.&lt;/li&gt;
&lt;li&gt;On crée le corps de notre requête.&lt;/li&gt;
&lt;li&gt;On envoie tout ça en utilisant la méthode &lt;code&gt;sendAsBinary()&lt;/code&gt; de notre objet &lt;code&gt;XMLHttpRequest&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Voici quelques explications sur la préparation du corps de la requête et de ses entêtes.&lt;/p&gt;

&lt;h3&gt;Collecter les informations à envoyer&lt;/h3&gt;

&lt;p&gt;En ce qui concerne le fichier, l'interface &lt;a href="http://www.w3.org/TR/FileAPI/#dfn-file" target="_blank"&gt;File&lt;/a&gt;, étendue par Mozilla, permet d'obtenir son nom, mais aussi sa taille et son type &lt;a href="http://fr.wikipedia.org/wiki/Multipurpose_Internet_Mail_Extensions" target="_blank"&gt;&lt;span class="caps"&gt;MIME&lt;/span&gt;&lt;/a&gt;. La lecture des données se fait par l'interface &lt;a href="http://www.w3.org/TR/FileAPI/#dfn-filereader" target="_blank"&gt;FileReader&lt;/a&gt;. On utilisera la méthode &lt;a href="http://www.w3.org/TR/FileAPI/#dfn-readAsBinaryStringAsync" target="_blank"&gt;&lt;code&gt;readAsBinaryString&lt;/code&gt;&lt;/a&gt; pour obtenir les données brutes de notre fichier.&lt;/p&gt;

&lt;p&gt;Une fois que l'on a toutes ces informations, il ne nous reste plus qu'à créer le corps et les entêtes de la requête.&lt;/p&gt;

&lt;h3&gt;Préparer le corps et les entêtes&lt;/h3&gt;

&lt;p&gt;Comme pour un transfert de fichier en &lt;span class="caps"&gt;POST&lt;/span&gt;, la requête est de type &lt;a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2" target="_blank"&gt;&lt;code&gt;multipart/form-data&lt;/code&gt;&lt;/a&gt;, c'est à dire que la requête est coupée en petits morceaux de type &lt;code&gt;form-data&lt;/code&gt;, délimités par des séparateurs, chaque morceaux représentant la valeur d'une clé, habituellement le nom de l'élément de saisie. On définit le nom de la partie – comme elle aurait était définie par un &lt;code&gt;input&lt;/code&gt; – avec l'attribut &lt;code&gt;name&lt;/code&gt; de l'entête &lt;code&gt;Content-Disposition&lt;/code&gt;, qu'en au nom du fichier transféré, on le défini avec l'attribut &lt;code&gt;filename&lt;/code&gt;. Comme FileAPI nous donne le type &lt;span class="caps"&gt;MIME&lt;/span&gt; du fichier, pas comme cet avare de Flash, on se fera une joie de le définir en utilisant l'entête &lt;code&gt;Content-Type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Vous noterez dans le code de la démonstration que j'échappe le nom du fichier transféré avec la fonction &lt;a href="https://developer.mozilla.org/fr/R%C3%A9f%C3%A9rence_de_JavaScript_1.5_Core/Fonctions_globales/encodeURIComponent" target="_blank"&gt;&lt;code&gt;encodeURIComponent()&lt;/code&gt;&lt;/a&gt;, c'est parce que malgré tous mes efforts, je n'ai pas trouvé de meilleure solution que cela pour gérer les fichiers accentués, alors il faudra restaurer le nom du fichier du côté serveur avec la fonction &lt;a href="http://php.net/manual/fr/function.urldecode.php" target="_blank"&gt;&lt;code&gt;urldecode()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Et pour le retour, un morceau de &lt;span class="caps"&gt;PHP&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Une fois prête, la requête est envoyée au fichier « handler.php » qui se contente de voir ce qui se trouve dans $_FILES['Filedata'] et de le renvoyer en &lt;span class="caps"&gt;JSON&lt;/span&gt;. Voici son code en &lt;span class="caps"&gt;PHP&lt;/span&gt;&amp;nbsp;:&lt;/p&gt;

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="reserved"&gt;if&lt;/span&gt;&amp;nbsp;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;empty&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$_FILES[&lt;/span&gt;&lt;span class="string"&gt;'Filedata'&lt;/span&gt;&lt;span class="symbol"&gt;]))&lt;/span&gt;&lt;br /&gt;
&lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="function"&gt;header&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'HTTP/1.0 404 Missing Filedata'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;exit;&lt;br /&gt;
&lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$rc&lt;/span&gt;&amp;nbsp;&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class="variable"&gt;$_FILES[&lt;/span&gt;&lt;span class="string"&gt;'Filedata'&lt;/span&gt;&lt;span class="symbol"&gt;]&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="function"&gt;header&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'Content-Type: application/json; charset=utf-8'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$rc[&lt;/span&gt;&lt;span class="string"&gt;'name'&lt;/span&gt;&lt;span class="symbol"&gt;]&lt;/span&gt;&amp;nbsp;&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class="function"&gt;urldecode&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$rc[&lt;/span&gt;&lt;span class="string"&gt;'name'&lt;/span&gt;&lt;span class="symbol"&gt;])&lt;/span&gt;;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="reserved"&gt;if&lt;/span&gt;&amp;nbsp;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="function"&gt;get_magic_quotes_gpc&lt;/span&gt;&lt;span class="symbol"&gt;())&lt;/span&gt;&lt;br /&gt;
&lt;span class="symbol"&gt;{&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="variable"&gt;$rc[&lt;/span&gt;&lt;span class="string"&gt;'name'&lt;/span&gt;&lt;span class="symbol"&gt;]&lt;/span&gt;&amp;nbsp;&lt;span class="symbol"&gt;=&lt;/span&gt;&amp;nbsp;&lt;span class="function"&gt;stripslashes&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$rc[&lt;/span&gt;&lt;span class="string"&gt;'name'&lt;/span&gt;&lt;span class="symbol"&gt;])&lt;/span&gt;;&lt;br /&gt;
&lt;span class="symbol"&gt;}&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
echo&amp;nbsp;&lt;span class="function"&gt;json_encode&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="variable"&gt;$rc&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;span class="delimiter"&gt;&lt;br /&gt;
&lt;br /&gt;
?&amp;gt;&lt;/span&gt;&lt;/code&gt;

&lt;p&gt;Et voilà&amp;nbsp;!&lt;/p&gt;

&lt;h2&gt;Rassembler, pour mieux s'aimer&lt;/h2&gt;

&lt;p&gt;Effectivement, c'est carrément merveilleux mais pour le moment seul Firefox propose l'interface et surtout des extensions clé aux interfaces définies par le w3c. On peut espérer que les autres navigateurs suivent, mais vu la guerre qui règne en ce moment, il ne serait pas si drôle que d'allumer un cierge dans un lieu froid à la belle acoustique.&lt;/p&gt;

&lt;p&gt;Mais ne boudons pas notre plaisir, et transformons plutôt une &lt;a href="http://www.weirdog.com/demos/fileapi-xhr/" target="_blank"&gt;démonstration de transfert asynchrone de fichiers avec les interfaces Javascript FileAPI et &lt;span class="caps"&gt;XHR&lt;/span&gt;&lt;/a&gt; en réalité&amp;nbsp;!&lt;/p&gt;
&lt;img src="http://feeds.feedburner.com/~r/wdblog/~4/virxgoxktN0" height="1" width="1"/&gt;</content>
	<feedburner:origLink>http://www.weirdog.com/blog/javascript/transfert-asynchrone-de-fichiers-avec-les-interfaces-javascript-fileapi-et-xhr.html</feedburner:origLink></entry>
	<entry>
		<title>Des miniatures à la demande grâce au module "thumbnailer"</title>
		<link href="http://feedproxy.google.com/~r/wdblog/~3/olEXDLr3mw4/miniatures-a-la-demande-module-thumbnailer.html" />
		<id>tag:weirdog.com,2010-11-01:miniatures-a-la-demande-module-thumbnailer</id>
		<updated>2010-11-01T19:17:34+01:00</updated>
		<published>2010-11-01T18:13:11+01:00</published>
		<author>
			<name>Laviale Olivier</name>
		</author>
		<category term="WdCore" />
		<content type="html" xml:lang="fr">&lt;p&gt;Le module « thumbnailer » permet la génération de miniatures à la demande. Il propose de nombreuses possibilités comme, entre autre, le remplissage par des fonds de couleur ou des damiers, la surimposition d'image, de nombreuses méthodes de redimensionnement, l'utilisation de versions pré-paramétrées. Les miniatures sont servies en utilisant des méthodes de mise en cache sophistiquées.&lt;/p&gt;

&lt;p&gt;Cet article fait suite aux articles « &lt;a href="http://weirdog.com/blog/php/une-classe-et-sept-methodes-pour-creer-des-miniatures.html" target="_blank"&gt;Une classe et sept méthodes pour créer des miniatures&lt;/a&gt; » et
« &lt;a href="http://weirdog.com/blog/php/generer-a-la-volee-des-miniatures-avec-mise-en-cache.html" target="_blank"&gt;Générer à la volée des miniatures avec mise en cache&lt;/a&gt; », qui témoignent de son historique, et vous invite à découvrir le module « thumbnailer » comme il est actuellement utilisé avec le framework &lt;a href="http://weirdog.com/wdcore/" target="_blank"&gt;WdCore&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://weirdog.com/demos/thumbnailer/" target="_blank"&gt;Une démonstration et des exemples&lt;/a&gt; sont disponibles sur mon site. Vous pourrez ainsi vous faire une idée. Vous pouvez également &lt;a href="http://weirdog.com/api/resources.files/355/download" target="_blank"&gt;télécharger la démonstration&lt;/a&gt; pour la tester sur votre serveur.&lt;/p&gt;

&lt;h2&gt;Installation de la démonstration&lt;/h2&gt;

&lt;p&gt;L'installation de la démonstration est très simple puisqu'il vous suffit de désarchiver les fichiers à la racine du &lt;span class="caps"&gt;DOCUMENT&lt;/span&gt;_ROOT et de veiller à ce que le dossier « /repository/ » soit modifiable. Je vous conseille d'&lt;a href="http://weirdog.com/blog/la-vie/premiers-pas-developpeur-ubuntu.html" target="_blank"&gt;ajouter un hôte virtuel à votre serveur&lt;/a&gt; et de changer les droits du dossier « /repository/ » en &lt;code&gt;0777&lt;/code&gt;, comme ça, vous êtes tranquille.&lt;/p&gt;

&lt;p&gt;En ce qui concerne les pré-requis, et puisque les versions pré-paramétrées ne sont pas démontrées, vous aurez seulement besoin d'une version récente de PHP5 et des fonctionnalités de réécriture d'URL de votre serveur.&lt;/p&gt;

&lt;h2&gt;Pris par le temps, à suivre&lt;/h2&gt;

&lt;p&gt;Je n'ai pas le temps d'en dire plus aujourd'hui, la conception de la démonstration a mangé pas mal de mon weekend. Je vous invite à revenir consulter cet article dans quelques jours, le temps pour moi de présenter correctement le module, et plus particulièrement les paramètres utilisables pour la demande de miniature. En attendant, je vous invite à jouer avec la &lt;a href="http://weirdog.com/demos/thumbnailer/" target="_blank"&gt;démonstration&lt;/a&gt; et à la &lt;a href="http://weirdog.com/api/resources.files/355/download" target="_blank"&gt;télécharger&lt;/a&gt; pour voir comment ça marche.&lt;/p&gt;

&lt;p&gt;À bientôt.&lt;/p&gt;

&lt;!--

Le module "thumbnailer et le framework WdCore
========================================

Écrit pour le framework [WdCore](/wdcore/), il étend les fonctionnalités des objets du module "resources.images", permettant d'obtenir directement l'URL d'une miniature pour un objet, et ajoute des routes à l'API RESTful du framework pour notamment prendre en charge la création de miniatures pour les images managées.

&lt;code class="php"&gt;&lt;span class="delimiter"&gt;&amp;lt;?php&lt;/span&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;span class="variable"&gt;$image&lt;/span&gt;&lt;span class="symbol"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="function"&gt;thumbnail&lt;/span&gt;&lt;span class="symbol"&gt;(&lt;/span&gt;&lt;span class="string"&gt;'w:100;h:100;m=fit'&lt;/span&gt;&lt;span class="symbol"&gt;)&lt;/span&gt;;&lt;span class="delimiter"&gt;&lt;br /&gt;
&lt;br /&gt;
?&amp;gt;&lt;/span&gt;&lt;/code&gt;

&lt;code class="html"&gt;/api/thumbnailer?src=/public/monimage.png&amp;amp;w=100&amp;amp;h=100&amp;amp;method=surface&lt;br /&gt;
/api/resources.images/32/thumbnail?version=news-view&lt;/code&gt;

--&gt;
&lt;img src="http://feeds.feedburner.com/~r/wdblog/~4/olEXDLr3mw4" height="1" width="1"/&gt;</content>
	<feedburner:origLink>http://www.weirdog.com/blog/wdcore/miniatures-a-la-demande-module-thumbnailer.html</feedburner:origLink></entry>
	<entry>
		<title>Un weekend chargé</title>
		<link href="http://feedproxy.google.com/~r/wdblog/~3/4Rqp75z-fcg/un-weekend-charge.html" />
		<id>tag:weirdog.com,2010-09-27:un-weekend-charge</id>
		<updated>2010-10-31T18:43:06+01:00</updated>
		<published>2010-09-27T01:47:23+01:00</published>
		<author>
			<name>Laviale Olivier</name>
		</author>
		<category term="La vie" />
		<content type="html" xml:lang="fr">&lt;p&gt;Cela fait quelques semaines que je travaille à l'intégration du multisite à &lt;a href="http://www.wdpublisher.com" target="_blank"&gt;mon &lt;span class="caps"&gt;CMS&lt;/span&gt;&lt;/a&gt;, et ce weekend on peut dire que j'en ai mis un sacré coup.&lt;/p&gt;

&lt;p&gt;C'est en mettant à jour &lt;a href="http://github.com/Weirdog" target="_blank"&gt;mes projets sur Github&lt;/a&gt; que je me suis rendu compte de tout le travail que j'ai fourni depuis la dernière mise à jour datant du début du mois de Juillet. À se demander si j'ai effectivement pris des vacances…&lt;/p&gt;

&lt;p&gt;Après ce weekend, j'ai pratiquement les yeux qui saignent mais après avoir comparé le code actuel au dernier commit, je suis plutôt content. Le multisite est presque-quasiment-pratiquement terminé et plein de choses me plaisent comme les deniers raffinements de l'interface, le nouveau tableau de bord, la possibilité d'ajouter des méthodes ou des getters à n'importe quelle instance de la nouvelle classe FObject, les opérations en &lt;span class="caps"&gt;REST&lt;/span&gt;ful, l'héritage des contenus et tous les éditeurs maintenant disponibles, les grosses améliorations du système de configuration et tous les chargements qui se font à la demande et qui rendent mon framework sacrément rapide, léger et modulable.&lt;/p&gt;

&lt;p&gt;J'aimerai simplement avoir le temps d'écrire plus. Avec cette mise à jour, je me rends compte que toutes ces évolutions sont difficiles à suivre, et qu'il faudra bien que je me pose un moment pour simplement écrire de la documentation et partager avec mes pairs. C'est pas si simple d'être le seul développeur de la boite, et malgré les retours très positifs des utilisateurs et des intégrateurs, j'aimerai avoir l'avis d'autres passionnés, mais pour cela il faudrait que je prenne le temps de réécrire le processus d'installation.&lt;/p&gt;

&lt;p&gt;Bon, il est presque deux heures, alors je vais me coucher parce que dans 7 heures je bosse.&lt;/p&gt;
&lt;img src="http://feeds.feedburner.com/~r/wdblog/~4/4Rqp75z-fcg" height="1" width="1"/&gt;</content>
	<feedburner:origLink>http://www.weirdog.com/blog/la-vie/un-weekend-charge.html</feedburner:origLink></entry>
	<entry>
		<title>Un module pour gérer des pièces jointes pour le CMS Publishr</title>
		<link href="http://feedproxy.google.com/~r/wdblog/~3/3wpsbSnjOAc/module-pieces-jointes-cms-publishr.html" />
		<id>tag:weirdog.com,2010-07-09:module-pieces-jointes-cms-publishr</id>
		<updated>2010-12-14T16:13:52+01:00</updated>
		<published>2010-07-10T19:31:20+01:00</published>
		<author>
			<name>Laviale Olivier</name>
		</author>
		<category term="Publishr" />
		<content type="html" xml:lang="fr">&lt;p&gt;En complément du module « resources.files » – le module de base pour la gestion de fichiers – le module « resources.files.attached » offre la possibilité de joindre des pièces (fichiers) aux entrées dont le constructeur hérite de « system.nodes ». Ainsi, lorsque l'on crée une revue de presse, on peut, si on le souhaite, y attacher de nombreuses coupures de presse (au format &lt;span class="caps"&gt;PDF&lt;/span&gt; par exemple), modifier leur titre et les ordonner.&lt;/p&gt;

&lt;h2&gt;Configurer le module&lt;/h2&gt;

&lt;p&gt;Afin de permettre la configuration du module, et parce qu'il ne propose aucune interface, le module « resources.files.attached » altère le bloc de configuration du module « resources.files » pour y ajouter ses options de configuration, permettant ainsi de sélectionner les modules héritant de « system.nodes » qui profiteront du système de pièces jointes :&lt;/p&gt;

&lt;p&gt;&lt;img src="http://weirdog.com/repository/files/image/321-resources-files-attachment-config.png" alt="resources-files-attachment-config" width="600" height="380" align="middle" /&gt;&lt;/p&gt;

&lt;h2&gt;Édition des pièces jointes&lt;/h2&gt;

&lt;p&gt;En altérant le bloc d'édition des entrées dont le constructeur hérite de « system.nodes », le module « resources.files.attached » permet le téléchargement et l'ajout de pièces jointes directement depuis le bloc d'édition des entrées. L'ordre des pièces jointes ainsi que leur titre peut-être modifié à tout moment, sans pour autant modifier les paramètres généraux des pièces qui sont gérées de manière globale par le module « resources.files ».&lt;/p&gt;

&lt;p&gt;La section « Pièces jointes » apparait pour les modules sélectionnés lors de la configuration. La capture d'écran suivante illustre la section lorsqu'aucune pièce n'est attachée :&lt;/p&gt;

&lt;p&gt;&lt;img src="http://weirdog.com/repository/files/image/322-resources-files-attachment-empty.png" alt="resources-files-attachment-empty" width="600" height="380" align="middle" /&gt;&lt;/p&gt;

&lt;h3&gt;Modifier les pièces jointes, en joindre de nouvelles&lt;/h3&gt;

&lt;p&gt;Il est possible de revenir sur une entrée pour modifier ses pièces jointes, les renommer, les réordonner, ou encore en joindre de nouvelles.&lt;/p&gt;

&lt;p&gt;La capture d'écran suivante présente la modification d'une entrée à laquelle on avait précédemment joint une pièce et à laquelle on est en train de joindre une nouvelle pièce. La première ligne présente la pièce précédemment jointe. Trois liens permettent respectivement d'aller éditer la pièce dans le module « resources.files », de télécharger la pièce ou encore de briser le lien avec la pièce, sans pour autant la supprimer du module « resources.files ». La seconde ligne présente la pièce que nous sommes en train de joindre, que nous pouvons retirer à tout moment avant d'enregistrer l'entrée.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://weirdog.com/repository/files/image/323-resources-files-attachment-old-new.png" rel="lightbox[]" target="_blank"&gt;&lt;img src="http://weirdog.com/api/resources.images/323/thumbnail?w=600&amp;amp;method=fixed-width&amp;amp;quality=80" alt="resources-files-attachment-old-new" width="600" align="middle" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On peut ainsi ajouter autant de pièces qu'on le souhaite :&lt;/p&gt;

&lt;p&gt;&lt;a href="http://weirdog.com/repository/files/image/324-resources-files-attachment-list.png" rel="lightbox[]" target="_blank"&gt;&lt;img src="http://weirdog.com/api/resources.images/324/thumbnail?w=600&amp;amp;method=fixed-width&amp;amp;quality=80" alt="resources-files-attachment-list" width="600" align="middle" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On peut également les renommer et les réordonner :&lt;/p&gt;

&lt;p&gt;&lt;img src="http://weirdog.com/repository/files/image/325-resources-files-attachment-rename.png" alt="resources-files-attachment-rename" width="600" height="240" align="middle" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://weirdog.com/repository/files/image/326-resources-files-attachment-reorder.png" alt="resources-files-attachment-reorder" width="600" height="240" align="middle" /&gt;&lt;/p&gt;

&lt;h2&gt;Déjà l'horizon&lt;/h2&gt;

&lt;p&gt;Le module est actuellement très pratique pour joindre de nouvelles pièces à des entrées, mais il ne permet pas de joindre des pièces &lt;em&gt;déjà&lt;/em&gt; gérées par le module « resources.files ». La prochaine version apportera cette fonctionnalité, ainsi qu'une gestion plus sensible des types de pièces jointes, en utilisant à bon escient les modules « resources.images » et « resources.videos ».&lt;/p&gt;
&lt;img src="http://feeds.feedburner.com/~r/wdblog/~4/3wpsbSnjOAc" height="1" width="1"/&gt;</content>
	<feedburner:origLink>http://www.weirdog.com/blog/publishr/module-pieces-jointes-cms-publishr.html</feedburner:origLink></entry>
</feed><!-- wdpublisher v0.5.8-dev (2010-11-17) # publishing time: 0'428 sec, memory usage 4276768 (peak: 4721820), queries: 22 (primary: 11, local: 11) -->
